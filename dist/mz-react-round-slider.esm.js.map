{
  "version": 3,
  "sources": ["../src/core/ui/RoundSlider.tsx"],
  "sourcesContent": ["import { IRoundSlider } from '../interfaces';\n// import { circleMovementAfterMouse } from 'mz-math';\nimport { useEffect, useRef, MouseEvent as  ReactMouseEvent } from 'react';\n\n// TODO: make handle any svg shape\n// TODO: provide option to gradient colors\n\nconst polarToCartesian = (cx: number, cy: number, rx: number, ry: number, angleInDegrees: number) : [number, number] => {\n    const angleInRadians = (angleInDegrees-90) * Math.PI / 180.0;\n\n    return [\n        cx + (rx * Math.cos(angleInRadians)),\n        cy + (ry * Math.sin(angleInRadians)),\n    ];\n}\n\nexport const RoundSlider = (props: IRoundSlider) => {\n\n    const handleRef = useRef<SVGEllipseElement>(null);\n\n    let {\n        rx, ry,\n        startAngle, endAngle,\n        strokeWidth, stroke,\n        rxHandle, ryHandle\n    } = props; // TODO: make const except endAngle\n\n    const width = rx * 2;\n    const height = ry * 2;\n\n    const angle = 0;\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    const sweepFlag = 1;\n\n    if(endAngle % 360 === 0){ // fix mode for negative\n        endAngle -= 0.00001;\n    }\n\n    const diffX = Math.max(0, rxHandle * 2 - strokeWidth);\n    const diffY = Math.max(0, ryHandle * 2 - strokeWidth);\n\n    const svgWidth = width + strokeWidth + diffX;\n    const svgHeight = height + strokeWidth + diffY;\n\n    const cx = rx + strokeWidth / 2 + diffX / 2;\n    const cy = ry + strokeWidth / 2 + diffY / 2;\n\n    const startPos = polarToCartesian(cx, cy, rx, ry, startAngle);\n    const endPos = polarToCartesian(cx, cy, rx, ry, endAngle);\n\n    const onValueChange = (evt: MouseEvent | ReactMouseEvent | TouchEvent) => {\n\n        if(!handleRef || !handleRef.current) return;\n\n        console.log('getTotalLength', handleRef.current.getTotalLength(), handleRef.current.getPointAtLength(0));\n\n        // find the percent [0, 100] of the current mouse position in slider path\n        const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n        const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n\n        console.log(mouseX, mouseY);\n    }\n\n    const onMouseDown = (evt: MouseEvent | ReactMouseEvent) => {\n        if (evt.preventDefault) {\n            evt.preventDefault();\n        }\n\n        onValueChange(evt);\n\n        window.addEventListener('mousemove', onValueChange);\n        window.addEventListener('mouseup', onMouseUp);\n    };\n\n    const onMouseUp = (_evt: MouseEvent | ReactMouseEvent) => {\n        window.removeEventListener('mousemove', onValueChange);\n        window.removeEventListener('mouseup', onValueChange);\n    };\n\n    useEffect(() => {\n\n        /*const update = (evt: MouseEvent) => {\n\n            if(!handleRef || !handleRef.current) return;\n\n            const mouse = [evt?.clientX ?? 0, evt?.clientY ?? 0];\n\n            // set circle css position ----------------------\n            const position = circleMovementAfterMouse(mouse, [cx, cy], rx);\n            handleRef.current.setAttribute('cx', `${ position[0] }px`);\n            handleRef.current.setAttribute('cy', `${ position[1] }px`);\n        };\n\n        document.addEventListener('mousemove', update);\n\n        return () => {\n            document.removeEventListener('mousemove', update);\n        };*/\n\n    }, []);\n\n    return (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={ svgWidth }\n            height={ svgHeight }>\n\n            <path\n                d={ `M ${ startPos[0] } ${ startPos[1] } A ${ rx } ${ ry } ${ angle } ${ largeArcFlag } ${ sweepFlag } ${ endPos[0] } ${ endPos[1] }` }\n                stroke={ stroke }\n                strokeWidth={ strokeWidth }\n                fill=\"none\"\n                shapeRendering=\"geometricPrecision\"\n                strokeLinecap=\"round\"\n                cursor=\"pointer\"\n            />\n\n            <ellipse\n                onMouseDown={ onMouseDown }\n                onMouseUp={ onMouseUp }\n                ref={ handleRef }\n                cx={ startPos[0] }\n                cy={ startPos[1] }\n                rx={ rxHandle }\n                ry={ ryHandle }\n                cursor=\"pointer\"\n                fill=\"#000\"\n            />\n        </svg>\n    )\n};"],
  "mappings": ";;;;;;AAEA,OAAS,aAAAA,EAAW,UAAAC,MAA8C,QAoG1D,OAKI,OAAAC,EALJ,QAAAC,MAAA,oBA/FR,IAAMC,EAAmB,CAACC,EAAYC,EAAYC,EAAYC,EAAYC,IAA8C,CACpH,IAAMC,GAAkBD,EAAe,IAAM,KAAK,GAAK,IAEvD,MAAO,CACHJ,EAAME,EAAK,KAAK,IAAIG,CAAc,EAClCJ,EAAME,EAAK,KAAK,IAAIE,CAAc,CACtC,CACJ,EAEaC,EAAeC,GAAwB,CAEhD,IAAMC,EAAYZ,EAA0B,IAAI,EAE5C,CACA,GAAAM,EAAI,GAAAC,EACJ,WAAAM,EAAY,SAAAC,EACZ,YAAAC,EAAa,OAAAC,EACb,SAAAC,EAAU,SAAAC,CACd,EAAIP,EAEEQ,EAAQb,EAAK,EACbc,EAASb,EAAK,EAEdc,EAAQ,EACRC,EAAeR,EAAWD,GAAc,IAAM,EAAI,EAClDU,EAAY,EAEfT,EAAW,MAAQ,IAClBA,GAAY,MAGhB,IAAMU,EAAQ,KAAK,IAAI,EAAGP,EAAW,EAAIF,CAAW,EAC9CU,EAAQ,KAAK,IAAI,EAAGP,EAAW,EAAIH,CAAW,EAE9CW,EAAWP,EAAQJ,EAAcS,EACjCG,EAAYP,EAASL,EAAcU,EAEnCrB,EAAKE,EAAKS,EAAc,EAAIS,EAAQ,EACpCnB,EAAKE,EAAKQ,EAAc,EAAIU,EAAQ,EAEpCG,EAAWzB,EAAiBC,EAAIC,EAAIC,EAAIC,EAAIM,CAAU,EACtDgB,EAAS1B,EAAiBC,EAAIC,EAAIC,EAAIC,EAAIO,CAAQ,EAElDgB,EAAiBC,GAAmD,CAEtE,GAAG,CAACnB,GAAa,CAACA,EAAU,QAAS,OAErC,QAAQ,IAAI,iBAAkBA,EAAU,QAAQ,eAAe,EAAGA,EAAU,QAAQ,iBAAiB,CAAC,CAAC,EAGvG,IAAMoB,EAASD,EAAI,KAAK,QAAQ,OAAO,IAAM,GAAMA,EAAmB,QAAWA,EAAmB,QAAQ,CAAC,EAAE,QACzGE,EAASF,EAAI,KAAK,QAAQ,OAAO,IAAM,GAAMA,EAAmB,QAAWA,EAAmB,QAAQ,CAAC,EAAE,QAE/G,QAAQ,IAAIC,EAAQC,CAAM,CAC9B,EAEMC,EAAeH,GAAsC,CACnDA,EAAI,gBACJA,EAAI,eAAe,EAGvBD,EAAcC,CAAG,EAEjB,OAAO,iBAAiB,YAAaD,CAAa,EAClD,OAAO,iBAAiB,UAAWK,CAAS,CAChD,EAEMA,EAAaC,GAAuC,CACtD,OAAO,oBAAoB,YAAaN,CAAa,EACrD,OAAO,oBAAoB,UAAWA,CAAa,CACvD,EAEA,OAAA/B,EAAU,IAAM,CAoBhB,EAAG,CAAC,CAAC,EAGDG,EAAC,OACG,MAAM,6BACN,MAAQwB,EACR,OAASC,EAET,UAAA1B,EAAC,QACG,EAAI,KAAM2B,EAAS,CAAC,KAAOA,EAAS,CAAC,OAAStB,KAAQC,KAAQc,KAAWC,KAAkBC,KAAeM,EAAO,CAAC,KAAOA,EAAO,CAAC,IACjI,OAASb,EACT,YAAcD,EACd,KAAK,OACL,eAAe,qBACf,cAAc,QACd,OAAO,UACX,EAEAd,EAAC,WACG,YAAciC,EACd,UAAYC,EACZ,IAAMvB,EACN,GAAKgB,EAAS,CAAC,EACf,GAAKA,EAAS,CAAC,EACf,GAAKX,EACL,GAAKC,EACL,OAAO,UACP,KAAK,OACT,GACJ,CAER",
  "names": ["useEffect", "useRef", "jsx", "jsxs", "polarToCartesian", "cx", "cy", "rx", "ry", "angleInDegrees", "angleInRadians", "RoundSlider", "props", "handleRef", "startAngle", "endAngle", "strokeWidth", "stroke", "rxHandle", "ryHandle", "width", "height", "angle", "largeArcFlag", "sweepFlag", "diffX", "diffY", "svgWidth", "svgHeight", "startPos", "endPos", "onValueChange", "evt", "mouseX", "mouseY", "onMouseDown", "onMouseUp", "_evt"]
}
