{
  "version": 3,
  "sources": ["../src/core/index.tsx", "../node_modules/mz-math/src/main/format.ts", "../node_modules/mz-math/src/main/other.ts", "../node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-math/src/main/random.ts", "../node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-math/src/main/color.ts", "../node_modules/mz-math/src/main/id.ts", "../node_modules/mz-math/src/main/shapes.ts", "../node_modules/mz-math/src/main/collision-detection.ts", "../node_modules/mz-math/src/main/animation.ts", "../src/core/domain/svg-provider.ts", "../src/core/domain/defaults-provider.ts", "../src/core/domain/common-provider.ts", "../src/core/domain/circle-provider.ts", "../src/core/domain/pointers-provider.ts", "../src/core/ui/Pointer.tsx", "../src/core/domain/style-provider.ts", "../src/core/ui/Pointers.tsx", "../src/core/domain/data-provider.ts", "../src/core/ui/Connection.tsx", "../src/core/domain/connection-provider.ts", "../src/core/ui/Text.tsx", "../src/core/ui/Ticks.tsx", "../src/core/domain/ticks-provider.ts", "../src/core/ui/Circle.tsx"],
  "sourcesContent": ["import { useEffect, useRef, useState } from 'react';\nimport { getSvg, ISvg } from './domain/svg-provider';\nimport { angle2value, getClosestEdge, getPointers, IPointer, IPointers, roundToStep } from './domain/pointers-provider';\nimport { ISettings } from './domain/settings-provider';\nimport { getNumber } from './domain/common-provider';\nimport {\n    DEFAULT_PATH_BORDER, DEFAULT_PATH_END_ANGLE, DEFAULT_PATH_RADIUS, DEFAULT_PATH_START_ANGLE,\n    DEFAULT_PATH_THICKNESS\n} from './domain/defaults-provider';\nimport Pointers from './ui/Pointers';\nimport { getData, IData } from './domain/data-provider';\nimport Connection from './ui/Connection';\nimport Text from './ui/Text';\nimport Ticks from './ui/Ticks';\nimport Circle from './ui/Circle';\nimport { mod } from 'mz-math';\nimport { isAngleInArc } from './domain/circle-provider';\nimport { outlineNoneStyle } from './domain/style-provider';\n\nexport const RoundSlider = (props: ISettings) => {\n\n    const [ data, setData ] = useState<IData|null>(null);\n    const [ svg, setSvg ] = useState<ISvg|null>(null);\n    const [ pointers, setPointers ] = useState<IPointers|null>(null);\n\n    const svgRef = useRef<SVGSVGElement>(null);\n\n    useEffect(() => {\n        setData(getData(props));\n    }, [ props ]);\n\n    useEffect(() => {\n        setPointers(getPointers(props, data));\n    }, [\n        props,\n        data,\n    ]);\n\n    useEffect(() => {\n        if(!pointers) return;\n\n        const pathStartAngle = getNumber(props.pathStartAngle, DEFAULT_PATH_START_ANGLE);\n        let pathEndAngle = getNumber(props.pathEndAngle, DEFAULT_PATH_END_ANGLE);\n\n        if(pathEndAngle <= pathStartAngle) {\n            pathEndAngle += 360;\n        }\n\n        setSvg(getSvg(\n            getNumber(props.pathRadius, DEFAULT_PATH_RADIUS),\n            getNumber(props.pathThickness, DEFAULT_PATH_THICKNESS),\n            getNumber(props.pathBorder, DEFAULT_PATH_BORDER),\n            pointers.maxRadius,\n            pathStartAngle,\n            pathEndAngle,\n        ));\n    }, [\n        props.pathRadius,\n        props.pathThickness,\n        props.pathBorder,\n        props.pathStartAngle,\n        props.pathEndAngle,\n        pointers,\n    ]);\n\n    const setPointersCallback = (pointer: IPointer, newAngleDeg: number) => {\n        if(props.disabled || !pointers.pointers || !pointer || pointer.disabled) return;\n\n        newAngleDeg = roundToStep(newAngleDeg, data.stepAngleDeg);\n        if(data.isClosedShape && mod(newAngleDeg, 360) === mod(svg.endAngleDeg, 360)){\n            newAngleDeg = svg.startAngleDeg;\n        }\n\n        if(pointer.angleDeg === newAngleDeg) return;\n\n        const handleOverlap = !props.pointersOverlap;\n        if(handleOverlap) {\n\n            let prevAngle, nextAngle;\n\n            if(data.isClosedShape) {\n                const prevIndex = mod(pointer.index - 1, pointers.pointers.length);\n                const nextIndex = mod(pointer.index + 1, pointers.pointers.length);\n\n                prevAngle = pointers.pointers[prevIndex].angleDeg;\n                nextAngle = pointers.pointers[nextIndex].angleDeg;\n            }\n            else{\n                prevAngle = pointer.index === 0 ? svg.startAngleDeg : pointers.pointers[pointer.index - 1].angleDeg;\n                nextAngle = pointer.index === pointers.pointers.length - 1 ? svg.endAngleDeg : pointers.pointers[pointer.index + 1].angleDeg;\n            }\n\n            if(nextAngle <= prevAngle) {\n                nextAngle += 360;\n            }\n\n            if(!isAngleInArc(prevAngle, nextAngle, newAngleDeg)){\n                newAngleDeg = getClosestEdge(\n                    prevAngle,\n                    nextAngle,\n                    newAngleDeg,\n                    svg.cx,\n                    svg.cy,\n                    svg.radius\n                );\n            }\n        }\n\n        if(pointer.angleDeg === newAngleDeg) return;\n\n        const _pointers = { ...pointers };\n        _pointers.pointers = [...pointers.pointers];\n        _pointers.pointers[pointer.index].angleDeg = newAngleDeg;\n        pointers.pointers = _pointers.pointers;\n\n        setPointers(_pointers);\n\n        if(typeof props.onChange === 'function') {\n            const values = _pointers.pointers.map(pointer => angle2value(\n                data,\n                pointer.angleDeg,\n                svg.startAngleDeg,\n                svg.endAngleDeg\n            ));\n\n            props.onChange(values);\n        }\n    };\n\n    return (\n        <>\n            {\n                svg &&\n                <svg\n                    ref={ svgRef }\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width={ svg.size }\n                    height={ svg.size }\n                    tabIndex={ 0 }\n                    focusable={ true }\n                    aria-disabled={ props.disabled ? true : undefined }\n                    style={ outlineNoneStyle }>\n\n                    {\n                        (props.SvgDefs) &&\n                        <defs>\n                            { props.SvgDefs }\n                        </defs>\n                    }\n\n                    <Ticks settings={ props } svg={ svg } data={ data } />\n\n                    <Circle\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        $svg={ svgRef.current }\n                        setPointer={ setPointersCallback }\n                    />\n\n                    <Connection\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        $svg={ svgRef.current }\n                        data={ data }\n                        setPointer={ setPointersCallback }\n                    />\n\n                    <Pointers\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        $svg={ svgRef.current }\n                        setPointer={ setPointersCallback }\n                        data={ data }\n                    />\n\n                    <Text\n                        settings={ props }\n                        pointers={ pointers }\n                        svg={ svg }\n                        data={ data }\n                    />\n                </svg>\n            }\n        </>\n    )\n};", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from '../types';\nimport { setDecimalPlaces } from './format';\n\nexport const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n\n/**\n * Convert polar coordinates to cartesian coordinates.\n */\nexport const polarToCartesian = (center: Vector2, radii: Vector2, angleInRad: number, decimalPlaces = Infinity) : Vector2 => {\n    const [cx, cy] = center;\n    const [rx, ry] = radii;\n\n    return [\n        setDecimalPlaces(cx + (rx * Math.cos(angleInRad)), decimalPlaces),\n        setDecimalPlaces(cy + (ry * Math.sin(angleInRad)), decimalPlaces),\n    ];\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\nimport { mod } from './other';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleInEllipse = (v2: Vector2, radii: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1]/radii[1], v2[0]/radii[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};\n\n/**\n * Shortest distance (angular) between two angles.\n */\nexport const getAnglesSub = (angleDegrees1: number, angleDegrees2: number, decimalPlaces = Infinity) : number => {\n    const angleDistance = Math.abs(mod(angleDegrees1, 360) - mod(angleDegrees2, 360));\n    return setDecimalPlaces(angleDistance <= 180 ? angleDistance : 360 - angleDistance, decimalPlaces);\n};\n\nexport const isAngleBetween = (angleDegrees: number, startAngleDegrees: number, endAngleDegrees: number) : boolean => {\n    const distance = getAnglesSub(startAngleDegrees, endAngleDegrees);\n    const distance1 = getAnglesSub(startAngleDegrees, angleDegrees);\n    const distance2 = getAnglesSub(endAngleDegrees, angleDegrees);\n    const totalDistance = distance1 + distance2;\n\n    // Use a small threshold for floating point errors\n    return Math.abs(totalDistance - distance) <= 0.001;\n}", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};\n\n// --------------- NORMAL --------------------------\n\nexport const v2GetNormal = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity): Vector2 => {\n    const sub = v2Sub(vector2, vector1);\n    return [\n        -setDecimalPlaces(sub[1], decimalPlaces),\n        setDecimalPlaces(sub[0], decimalPlaces)\n    ];\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const scale = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, scale);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\nimport { v2Sub } from '../linear-algebra/vector';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};\n\n/**\n * Calculate the equation of a line given two points in a 2D space.\n * y = ax + b\n * y - y1 = m(x - x1)\n * m = (y2 - y1) / (x2 - x1)\n */\nexport const getLinearEquationBy2Points = (point1: Vector2, point2: Vector2) : {\n    slope: number|undefined,\n    yIntercept: number|undefined,\n    xIntercept: number|undefined,\n    formula: string,\n} => {\n    const [deltaX, deltaY] = v2Sub(point2, point1);\n    const [x, y] = point1;\n\n    if(deltaX === 0) {\n        return {\n            slope: undefined,\n            xIntercept: x,\n            yIntercept: undefined,\n            formula: `x = ${ x }`,\n        };\n    }\n\n    const m = deltaY / deltaX;\n    const b = y - m * x;\n    let formula = '';\n\n    if(m === 0) {\n        formula = `y = ${ b }`;\n    }\n    else{\n        formula = `y = ${ m === 1 ? '' : m }x`;\n\n        if(b !== 0) {\n            formula += ` ${ b < 0 ? '-' : '+' } ${ Math.abs(b) }`;\n        }\n    }\n\n    return {\n        slope: m,\n        xIntercept: undefined,\n        yIntercept: b,\n        formula,\n    };\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Ellipse Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const ellipseMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radii: Vector2\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return ellipseMovement(center, angle, radii[0], radii[1]);\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { setDecimalPlaces } from './format';\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { ICircle, IPolygon, IRect, Matrix2, Vector2 } from '../types';\nimport { mod } from './other';\nimport { v2GetNormal, v2DotProduct } from './linear-algebra/vector';\n\n/**\n * Rectangles collision detection.\n * Rectangles should not be rotated.\n * The algorithm works by ensuring there is no gap between any of the 4 sides of the rectangles.\n * Any gap means a collision does not exist.\n * Returns true if collision is detected.\n */\nexport const rectCollide = (rect1: IRect, rect2: IRect) : boolean => {\n    return rect1.x <= rect2.x + rect2.w &&\n            rect1.x + rect1.w >= rect2.x &&\n            rect1.y <= rect2.y + rect2.h &&\n            rect1.h + rect1.y >= rect2.y;\n};\n\n/**\n * Circles collision detection.\n * This algorithm works by taking the center points of the two circles\n * and ensuring the distance between the center points\n * are less than the two radii added together.\n * Returns true if collision is detected.\n */\nexport const circleCollide = (circle1: ICircle, circle2: ICircle) => {\n    const dx = Math.abs(circle1.cx - circle2.cx);\n    const dy = Math.abs(circle1.cy - circle2.cy);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= circle1.r + circle2.r;\n};\n\n//-------------------- Separating Axis Theorem (SAT) Collision detection -------------------------\n\nconst getEdges = (poly: IPolygon) : Matrix2[] => {\n    const edges: Matrix2[] = [];\n\n    for(let i= 0; i<poly.length; i++){\n        const nextIndex = mod(i + 1, poly.length);\n        const edge: Matrix2 = [poly[i], poly[nextIndex]];\n        edges.push(edge);\n    }\n\n    return edges;\n};\n\nexport const convexPolygonsCollide = (poly1: IPolygon, poly2: IPolygon): boolean => {\n    const edges: Matrix2[] = [];\n\n    // collect polygon edges, and combine then into a single array\n    edges.push(...getEdges(poly1));\n    edges.push(...getEdges(poly2));\n\n    // for each edge, find the normal vector and project both polygons onto it\n    for (const edge of edges) {\n        const normal = v2GetNormal(edge[0], edge[1]);\n        const p1Proj = projectPolygon(poly1, normal);\n        const p2Proj = projectPolygon(poly2, normal);\n\n        // Check if the projections overlap\n        const isOverlap = p1Proj.max >= p2Proj.min && p2Proj.max >= p1Proj.min;\n\n        // Check if the projections overlap; if not, the polygons do not collide\n        if (!isOverlap) return false;\n    }\n\n    // If all tests pass, the polygons overlap and collide\n    return true;\n};\n\n/**\n * Project every polygon point onto the normal.\n * Then find min and max.\n */\nconst projectPolygon = (polygon: IPolygon, normal: Vector2): { min: number, max: number } => {\n    let min = Infinity;\n    let max = -Infinity;\n\n    // Project each vertex of the polygon onto the axis\n    for (const vertex of polygon) {\n        const projection = v2DotProduct(vertex, normal);\n        min = Math.min(min, projection);\n        max = Math.max(max, projection);\n    }\n\n    return { min, max };\n};", "export interface IAnimationProps {\n    duration?: number;\n    callback: (result: IAnimationResult) => void;\n    restartOnResize?: boolean;\n    resizeCallback?: (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => void;\n}\n\nexport interface IAnimationResult {\n    start: () => void;\n    stop: () => void;\n    pause: () => void;\n    resume: () => void;\n    restart: () => void;\n    isAnimating: () => boolean;\n    getStartTime: () => number|undefined;\n    getElapsedTime: () => number|undefined;\n    getPercent: () => number|undefined;\n    getResizeObserver: () => ResizeObserver|undefined;\n}\n\nexport const animate = (props: IAnimationProps) : IAnimationResult => {\n\n    const _duration = props.duration !== undefined ? props.duration : Infinity;\n\n    let startTime: number|undefined = undefined; // in milliseconds\n    let animationId: number|undefined = undefined;\n\n    // the time elapsed since the start of the animation (in milliseconds)\n    let elapsed: number|undefined = undefined;\n    let previousTimeStamp: number|undefined = undefined;\n\n    let animating = false;\n    let observer: ResizeObserver|undefined = undefined;\n\n    // -------------------- COMMANDS ---------------------\n\n    const stop = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = false;\n\n        /*if(observer !== undefined){\n            observer.disconnect();\n            observer = undefined;\n        }*/\n\n        if(animationId === undefined) return;\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const restart = () => {\n        stop();\n        start();\n    };\n\n    const pause = () => {\n        animating = false;\n    };\n\n    const resume = () => {\n        animating = true;\n    };\n\n    /**\n     * Animation Step.\n     * @param {number} timeStamp in milliseconds\n     */\n    const step = (timeStamp: DOMHighResTimeStamp) => {\n\n        if (startTime === undefined) {\n            startTime = timeStamp;\n        }\n\n        // the time elapsed since the start of the animation (in milliseconds)\n        elapsed = timeStamp - startTime;\n\n        if (animating && previousTimeStamp !== timeStamp && typeof props.callback === 'function') {\n\n            // do the rendering .............\n            props.callback(getResult());\n        }\n\n        if(elapsed <= _duration){\n            previousTimeStamp = timeStamp;\n            animationId = window.requestAnimationFrame(step);\n        }\n        else{\n            stop();\n        }\n    };\n\n    const observerHandler = (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => {\n        restart();\n\n        if(typeof props.resizeCallback === 'function'){\n            props.resizeCallback(_entries, _observer);\n        }\n    };\n\n    const start = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = true;\n\n        if(props.restartOnResize && window.ResizeObserver && observer === undefined){\n            observer = new ResizeObserver(observerHandler);\n            observer.observe(document.body, { box: 'border-box' });\n        }\n        else{\n            animationId = window.requestAnimationFrame(step);\n        }\n    };\n\n    // --------------- GET INFO ----------------------\n\n    /**\n     * the time elapsed since the start of the animation (in milliseconds)\n     */\n    const getElapsedTime = () : number|undefined => {\n        return elapsed;\n    };\n\n    const isAnimating = () => {\n        return animating;\n    };\n\n    const getStartTime = () => {\n        return startTime;\n    };\n\n    const getPercent = () => {\n        if(_duration === Infinity || elapsed === undefined) return undefined;\n        return elapsed * 100 / _duration;\n    };\n\n    const getResizeObserver = () => {\n      return observer;\n    };\n\n    const getResult = () : IAnimationResult => {\n        return {\n\n            // commands --------------\n            start,\n            stop,\n            pause,\n            resume,\n            restart,\n\n            // information -------\n            isAnimating,\n            getElapsedTime,\n            getStartTime,\n            getPercent,\n            getResizeObserver,\n        };\n    };\n\n    return getResult();\n};\n", "import { setDecimalPlaces, Vector2 } from 'mz-math';\n\nexport interface ISvg {\n    cx: number;\n    cy: number;\n    radius: number;\n    size: number;\n    thickness: number;\n    border: number;\n    startAngleDeg: number;\n    endAngleDeg: number;\n}\n\nexport const getSvg = (\n    circleRadius: number,\n    circleThickness: number,\n    circleBorder: number,\n    maxPointerRadius: number,\n    startAngleDeg: number,\n    endAngleDeg: number\n) : ISvg => {\n\n    const thickness = circleThickness + circleBorder * 2;\n\n    const diff = Math.max(0, maxPointerRadius * 2 - thickness);\n    const size = circleRadius * 2 + thickness + diff;\n\n    const [ cx, cy ] = getSVGCenter(\n        circleRadius,\n        maxPointerRadius,\n        circleThickness,\n        circleBorder\n    );\n\n    return {\n        cx,\n        cy,\n        radius: circleRadius,\n        size,\n        thickness: circleThickness,\n        border: circleBorder,\n        startAngleDeg,\n        endAngleDeg\n    } as ISvg;\n};\n\nconst getSVGCenter = (\n    circleRadius: number,\n    maxPointerRadius: number,\n    circleThickness: number,\n    circleBorder: number\n) : Vector2 => {\n\n    const size = getSVGSize(\n        circleRadius,\n        maxPointerRadius,\n        circleThickness,\n        circleBorder\n    );\n\n    const val = setDecimalPlaces(size/2, 2);\n\n    return [\n        val,\n        val,\n    ];\n};\n\nconst getSVGSize = (\n    circleRadius: number,\n    maxPointerRadius: number,\n    circleThickness: number,\n    circleBorder: number\n) : number => {\n    const thickness = circleThickness + circleBorder * 2;\n    const diff = Math.max(0, maxPointerRadius * 2 - thickness);\n    return circleRadius * 2 + thickness + diff;\n};", "// Data  Defaults --------------------\nexport const DEFAULT_MIN = 0;\nexport const DEFAULT_MAX = 100;\nexport const DEFAULT_STEP = 1;\nexport const DEFAULT_ARROW_STEP = 1;\nexport const DEFAULT_ROUND = 0;\n\n// Path Defaults ---------------------\nexport const DEFAULT_PATH_START_ANGLE = 0;\nexport const DEFAULT_PATH_END_ANGLE = 360;\nexport const DEFAULT_PATH_RADIUS = 150;\nexport const DEFAULT_PATH_THICKNESS = 5;\nexport const DEFAULT_PATH_BG_COLOR = '#efefef';\nexport const DEFAULT_PATH_BORDER = 0;\nexport const DEFAULT_PATH_BORDER_COLOR = '#444444';\n\n// Pointer Defaults ------------------\nexport const DEFAULT_POINTER_RADIUS = 10;\nexport const DEFAULT_POINTER_BG_COLOR = '#163a86';\nexport const DEFAULT_POINTER_BG_COLOR_SELECTED = '#000';\nexport const DEFAULT_POINTER_BG_COLOR_DISABLED = '#a8a8a8';\nexport const DEFAULT_POINTER_BORDER = 0;\nexport const DEFAULT_POINTER_BORDER_COLOR = '#000';\n\n// Connection Defaults ------------------\nexport const DEFAULT_CONNECTION_BG_COLOR = '#5daed2';\nexport const DEFAULT_CONNECTION_BG_COLOR_DISABLED = '#97b0bb';\n\n// Text Defaults ------------------------\nexport const DEFAULT_TEXT_COLOR = '#000';\nexport const DEFAULT_TEXT_FONT_SIZE = 16;\n\n// Ticks Defaults -----------------------\nexport const DEFAULT_TICKS_WIDTH = 3;\nexport const DEFAULT_TICKS_HEIGHT = 20;\nexport const DEFAULT_TICKS_COLOR = '#efefef';\nexport const DEFAULT_TICKS_VALUES_COLOR = '#000';\nexport const DEFAULT_TICKS_VALUES_FONT_SIZE = 12;\nexport const DEFAULT_TICKS_GROUP_SIZE = 10;\nexport const DEFAULT_TICKS_VALUES_DISTANCE = 15;\n\n\n", "import { isNumber } from 'mz-math';\n\nexport const getNumber = (value: number|string|undefined|null, defaultValue: number) : number => {\n    return isNumber(value) ? Number(value) : defaultValue;\n};\n\nexport const getString = (value: string|undefined|null, defaultValue: string) : string => {\n    return value === undefined || value === null ? defaultValue : value;\n};\n\nexport const getBoolean = (value: boolean|undefined|null, defaultValue: boolean) : boolean => {\n    return value === undefined || value === null ? defaultValue : value;\n};", "import { mod } from 'mz-math';\n\nexport interface ICircle {\n    strokeDasharray: string;\n    strokeOffset: number;\n}\n\nexport const isAngleInArc = (startAngleDeg: number, endAngleDeg: number, currentDegrees: number) : boolean => {\n\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    return currentDegrees >= startAngleDeg && currentDegrees <= endAngleDeg ||\n        (currentDegrees + 360) >= startAngleDeg && (currentDegrees + 360) <= endAngleDeg;\n};\n\nexport const getAnglesDistance = (startAngle: number, endAngle: number) => {\n    if(endAngle < startAngle) {\n        endAngle += 360;\n    }\n\n    const diff = endAngle - startAngle;\n    const diffMod = mod(diff, 360);\n\n    return diffMod === 0 && diff > 0 ? 360 : diffMod;\n};\n\nexport const getCircle = (\n    startAngleDeg: number,\n    endAngleDeg: number,\n    radius: number,\n) : ICircle => {\n\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    const circumference = 2 * Math.PI *radius;\n\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    const angleDiff = endAngleDeg - startAngleDeg;\n    const strokeOffset = -(startAngleDeg / 360) * circumference;\n    const strokeDasharray = (angleDiff / 360) * circumference;\n    const complement = circumference - strokeDasharray;\n\n    return {\n        strokeDasharray: [ strokeDasharray, complement ].join(' '),\n        strokeOffset,\n    } as ICircle;\n};", "import {\n    Vector2,\n    newId,\n    convertRange,\n    mod,\n    setDecimalPlaces,\n    v2Sub,\n    radiansToDegrees,\n    degreesToRadians, circleMovement, v2Distance\n} from 'mz-math';\nimport { ISettings } from './settings-provider';\nimport {\n    DEFAULT_PATH_END_ANGLE,\n    DEFAULT_PATH_START_ANGLE,\n    DEFAULT_POINTER_BG_COLOR, DEFAULT_POINTER_BG_COLOR_DISABLED, DEFAULT_POINTER_BG_COLOR_SELECTED,\n    DEFAULT_POINTER_BORDER,\n    DEFAULT_POINTER_BORDER_COLOR,\n    DEFAULT_POINTER_RADIUS,\n} from './defaults-provider';\nimport { getBoolean, getNumber, getString } from './common-provider';\nimport { IData } from './data-provider';\nimport { getAnglesDistance } from './circle-provider';\n\nexport interface IPointer {\n    id: string;\n    index: number;\n    radius: number;\n    angleDeg: number;\n    bgColor: string;\n    bgColorSelected: string;\n    bgColorDisabled: string;\n    border: number;\n    borderColor: string;\n    disabled: boolean;\n    ariaLabel?: string;\n}\n\nexport interface IPointers {\n    pointers: IPointer[];\n    maxRadius: number;\n}\n\nexport const getAngleByMouse = (\n    $svg: SVGSVGElement,\n    clientX: number,\n    clientY: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number\n) => {\n    const { left, top } = $svg.getBoundingClientRect();\n\n    const relativeMouse: Vector2 = [\n        clientX - left,\n        clientY - top,\n    ];\n\n    const vector = v2Sub(relativeMouse, [ cx, cy ]);\n\n    let angleRad = Math.atan2(vector[1] / ry, vector[0] / rx);\n    if(angleRad < 0){\n        angleRad += 2 * Math.PI;\n    }\n\n    return radiansToDegrees(angleRad);\n};\n\nexport const angle2value = (data: IData, angle: number, pathStartAngle: number, pathEndAngle: number) : string | number => {\n\n    if(pathEndAngle < pathStartAngle) {\n        pathEndAngle += 360;\n    }\n\n    if(angle < pathStartAngle){\n        angle += 360;\n    }\n\n    let value: string|number = convertRange(angle, pathStartAngle, pathEndAngle, data.min, data.max);\n\n    if(data.data.length > 0) {\n        const index = Math.round(value);\n        value = data.data[index];\n    }\n    else{\n        value = setDecimalPlaces(value, data.round);\n    }\n\n    return value;\n};\n\nconst value2angle = (data: IData, value: string | number, pathStartAngle: number, pathEndAngle: number) => {\n    let _value: number;\n\n    if(pathEndAngle < pathStartAngle) {\n        pathEndAngle += 360;\n    }\n\n    if(data.data.length > 0) {\n        const valueIndex = data.data.findIndex(item => item === value);\n        _value = valueIndex === -1 ? 0 : valueIndex;\n    }\n    else{\n        _value = typeof value !== 'number' ? data.min : value;\n    }\n\n    return mod(convertRange(_value, data.min, data.max, pathStartAngle, pathEndAngle), 360);\n};\n\nconst initPointers = (\n    settings: ISettings,\n    data: IData\n) : IPointer[] => {\n\n    if(!settings || !settings.pointers || settings.pointers.length < 0 || !data) {\n        return [{\n            id: newId(),\n            index: 0,\n            radius: DEFAULT_POINTER_RADIUS,\n            angleDeg: mod(getNumber(settings.pathStartAngle, DEFAULT_PATH_START_ANGLE), 360),\n            bgColor: getString(settings.pointerBgColor, DEFAULT_POINTER_BG_COLOR),\n            bgColorSelected: getString(settings.pointerBgColorSelected, DEFAULT_POINTER_BG_COLOR_SELECTED),\n            bgColorDisabled: getString(settings.pointerBgColorDisabled, DEFAULT_POINTER_BG_COLOR_DISABLED),\n            border: getNumber(settings.pointerBorder, DEFAULT_POINTER_BORDER),\n            borderColor: getString(settings.pointerBorderColor, DEFAULT_POINTER_BORDER_COLOR),\n            disabled: !!settings.disabled,\n        }]\n    }\n\n    const pointers: IPointer[] = [];\n\n    for(let i=0; i<settings.pointers.length; i++) {\n        const settingPointer = settings.pointers[i];\n\n        const bgColor = settingPointer.bgColor ? settingPointer.bgColor : getString(settings.pointerBgColor, DEFAULT_POINTER_BG_COLOR);\n        const bgColorSelected = settingPointer.bgColorSelected ? settingPointer.bgColorSelected : getString(settings.pointerBgColorSelected, DEFAULT_POINTER_BG_COLOR_SELECTED);\n        const bgColorDisabled = settingPointer.bgColorDisabled ? settingPointer.bgColorDisabled : getString(settings.pointerBgColorDisabled, DEFAULT_POINTER_BG_COLOR_DISABLED);\n        const border = settingPointer.border ? settingPointer.border : getNumber(settings.pointerBorder, DEFAULT_POINTER_BORDER);\n        const borderColor = settingPointer.borderColor ? settingPointer.borderColor : getString(settings.pointerBorderColor, DEFAULT_POINTER_BORDER_COLOR);\n        const disabled = settingPointer.disabled !== undefined ? settingPointer.disabled : getBoolean(settings.disabled, false);\n        const pathStartAngle = getNumber(settings.pathStartAngle, DEFAULT_PATH_START_ANGLE);\n        const pathEndAngle = getNumber(settings.pathEndAngle, DEFAULT_PATH_END_ANGLE);\n\n        const angleDeg = value2angle(\n            data,\n            settingPointer.value,\n            pathStartAngle,\n            pathEndAngle,\n        );\n        let angleAfterStep = roundToStep(angleDeg, data.stepAngleDeg);\n\n        if(data.isClosedShape && mod(angleAfterStep, 360) === mod(pathEndAngle, 360)){\n            angleAfterStep = pathStartAngle;\n        }\n\n        pointers.push({\n            id: newId(),\n            index: i,\n            radius: getNumber(settingPointer.radius, DEFAULT_POINTER_RADIUS),\n            angleDeg: angleAfterStep,\n            bgColor,\n            bgColorSelected,\n            bgColorDisabled,\n            border,\n            borderColor,\n            disabled,\n            ariaLabel: settingPointer.ariaLabel,\n        });\n    }\n\n    return pointers;\n};\n\nexport const getPointers = (settings: ISettings, data: IData) : IPointers => {\n\n    const pointers = initPointers(settings, data);\n\n    return {\n        pointers,\n        maxRadius: getMaxRadius(pointers),\n    }\n};\n\nconst getMaxRadius = (pointers: IPointer[]) : number => {\n    if(pointers.length <= 0) return 0;\n\n    let max = -Infinity;\n\n    for(const pointer of pointers){\n        max = Math.max(max, Math.max(0, pointer.radius + pointer.border/2));\n    }\n\n    return max;\n};\n\nexport const getClosestPointer = (\n    pointers: IPointer[],\n    currentPlaceDegrees: number,\n    cx: number,\n    cy: number,\n    pathRadius: number\n) => {\n    if(!pointers || pointers.length <= 0) return null;\n\n    if(pointers.length === 1) return pointers[0];\n\n    const angleRad = convertRange(degreesToRadians(currentPlaceDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const currentPointOnArc = circleMovement([ cx, cy ], angleRad, pathRadius);\n\n    let min: number|undefined = undefined;\n    let closestPointer: IPointer = null;\n\n    const enabledPointers = pointers.filter(p => !p.disabled);\n\n    for(const pointer of enabledPointers) {\n        const pointerAngleRad = convertRange(degreesToRadians(pointer.angleDeg), 0, Math.PI * 2, 0, Math.PI);\n        const pointOnArc = circleMovement([ cx, cy ], pointerAngleRad, pathRadius);\n        const distance = v2Distance(currentPointOnArc, pointOnArc);\n\n        if(min === undefined || distance < min) {\n            min = distance;\n            closestPointer = pointer;\n        }\n    }\n\n    return { ...closestPointer };\n};\n\nexport const getClosestEdge = (\n    startAngleDegrees: number,\n    endAngleDegrees: number,\n    currentPlaceDegrees: number,\n    cx: number,\n    cy: number,\n    pathRadius: number\n) => {\n\n    const angleRad = convertRange(degreesToRadians(currentPlaceDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const currentPointOnArc = circleMovement([ cx, cy ], angleRad, pathRadius);\n\n    const startAngleRad = convertRange(degreesToRadians(startAngleDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const startPointOnArc = circleMovement([ cx, cy ], startAngleRad, pathRadius);\n\n    const endAngleRad = convertRange(degreesToRadians(endAngleDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n    const endPointOnArc = circleMovement([ cx, cy ], endAngleRad, pathRadius);\n\n    const distance1 = v2Distance(currentPointOnArc, startPointOnArc);\n    const distance2 = v2Distance(currentPointOnArc, endPointOnArc);\n\n    return distance1 <= distance2 ? startAngleDegrees : endAngleDegrees;\n};\n\nexport const getMinMaxDistancePointers = (pointers: IPointer[], pathStartAngle: number) : [IPointer, IPointer] | null => {\n    if(!pointers || pointers.length <= 0) return null;\n\n    let minDistance = undefined;\n    let maxDistance = undefined;\n    let minPointer = null;\n    let maxPointer = null;\n\n    for(const pointer of pointers) {\n\n        const distance = getAnglesDistance(pathStartAngle, pointer.angleDeg);\n\n        if(minDistance === undefined || distance < minDistance) {\n            minPointer = pointer;\n            minDistance = distance;\n        }\n\n        if(maxDistance === undefined || distance > maxDistance) {\n            maxPointer = pointer;\n            maxDistance = distance;\n        }\n    }\n\n    if(minPointer === null || maxPointer === null) return null;\n\n    return [\n        minPointer,\n        maxPointer\n    ];\n};\n\nexport const roundToStep = (num: number, step: number) : number => {\n    return step === 0 ? 0 : Math.round(num / step) * step;\n};\n", "import { angle2value, getAngleByMouse, getClosestEdge, IPointer } from '../domain/pointers-provider';\nimport {\n    useEffect,\n    useState,\n    MouseEvent as ReactMouseEvent,\n    TouchEvent as ReactTouchEvent,\n    KeyboardEvent,\n    useRef, useCallback, MutableRefObject\n} from 'react';\nimport { circleMovement, convertRange, degreesToRadians, Vector2 } from 'mz-math';\nimport { ISettings } from '../domain/settings-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { isAngleInArc } from '../domain/circle-provider';\nimport { IData } from '../domain/data-provider';\nimport { outlineNoneStyle } from '../domain/style-provider';\n\nexport interface IPointerProps {\n    settings: ISettings;\n    pointer: IPointer;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n    data: IData;\n}\n\nconst getPointerFill = (\n    pointer: IPointer,\n    pointerRef: MutableRefObject<SVGGElement>,\n    bgColor: string,\n    bgColorSelected: string,\n    bgColorDisabled: string\n) => {\n    if(pointer.disabled) return bgColorDisabled;\n\n    if(document.activeElement === pointerRef.current) {\n        return bgColorSelected || bgColor;\n    }\n\n    return bgColor;\n};\n\nconst Pointer = (props: IPointerProps) => {\n\n    const pointerRef = useRef<SVGGElement|null>(null);\n\n    const {\n        pointer, svg, $svg,\n        setPointer, data, settings,\n    } = props;\n\n    const {\n        radius,\n        angleDeg,\n        bgColor,\n        bgColorSelected,\n        bgColorDisabled,\n        border,\n        borderColor,\n    } = props.pointer;\n\n    const { cx, cy } = svg;\n\n    const [ center, setCenter ] = useState<Vector2|null>(null);\n    const [ value, setValue ] = useState<string>('');\n\n    useEffect(() => {\n        const value = angle2value(\n            data,\n            pointer.angleDeg,\n            svg.startAngleDeg,\n            svg.endAngleDeg\n        );\n        setValue(value === undefined ? '' : value.toString())\n    }, [\n        data,\n        pointer.angleDeg,\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n    ]);\n\n    useEffect(() => {\n        const angleRad = convertRange(degreesToRadians(angleDeg), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n        const pointerCenter = circleMovement([cx, cy], angleRad, svg.radius);\n        setCenter(pointerCenter);\n    }, [\n        angleDeg,\n        cx,\n        cy,\n        svg.radius,\n    ]);\n\n    const onValueChange = useCallback((evt: MouseEvent | ReactMouseEvent | TouchEvent | ReactTouchEvent) => {\n        if(!$svg || settings.disabled || pointer.disabled) return;\n\n        const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n        const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n\n        const degrees = getAngleByMouse(\n            $svg,\n            mouseX,\n            mouseY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        let newAngleDeg;\n\n        if(!isAngleInArc(\n            svg.startAngleDeg,\n            svg.endAngleDeg,\n            degrees\n        )){\n            newAngleDeg = getClosestEdge(\n                svg.startAngleDeg,\n                svg.endAngleDeg,\n                pointer.angleDeg,\n                svg.cx,\n                svg.cy,\n                svg.radius\n            );\n        }\n        else{\n            newAngleDeg = degrees;\n        }\n\n        setPointer(pointer, newAngleDeg);\n    }, [\n        $svg,\n        pointer,\n        setPointer,\n        svg.cx,\n        svg.cy,\n        svg.endAngleDeg,\n        svg.radius,\n        svg.startAngleDeg,\n        settings.disabled,\n    ]);\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onValueChange);\n        window.removeEventListener('mouseup', onValueChange);\n    };\n\n    const onMouseDown = (evt: ReactMouseEvent) => {\n        if(settings.disabled || pointer.disabled) return;\n\n        onValueChange(evt);\n\n        window.addEventListener('mousemove', onValueChange);\n        window.addEventListener('mouseup', onMouseUp);\n    };\n\n    const onKeyDown = (evt: KeyboardEvent) => {\n\n        if(settings.disabled || pointer.disabled || settings.keyboardDisabled) return;\n\n        switch (evt.key) {\n            case 'ArrowLeft': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg + data.stepAngleDeg);\n                break;\n            }\n\n            case 'ArrowRight': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg - data.stepAngleDeg);\n                break;\n            }\n\n            case 'ArrowUp': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg - data.stepAngleDeg);\n                break;\n            }\n\n            case 'ArrowDown': {\n                evt.preventDefault();\n                setPointer(pointer, pointer.angleDeg + data.stepAngleDeg);\n                break;\n            }\n        }\n    };\n\n    useEffect(() => {\n        const $current = pointerRef.current;\n\n        const onTouch = (evt: TouchEvent | ReactTouchEvent) => {\n            if(settings.disabled || pointer.disabled) return;\n\n            evt.preventDefault();\n            evt.stopPropagation();\n            onValueChange(evt);\n        };\n\n        const onWheel = (evt: WheelEvent) => {\n\n            if(settings.disabled || pointer.disabled || settings.mousewheelDisabled || document.activeElement !== $current) return;\n\n            evt.stopPropagation();\n            evt.preventDefault();\n\n            const scrollTop = evt.deltaY < 0;\n\n            let newAngleDeg;\n            if(scrollTop) {\n                newAngleDeg = pointer.angleDeg + data.stepAngleDeg;\n            }\n            else{\n                newAngleDeg = pointer.angleDeg - data.stepAngleDeg;\n            }\n\n            setPointer(pointer, newAngleDeg);\n        };\n\n        $current?.addEventListener('touchmove', onTouch, {\n            passive: false,\n        });\n\n        document.addEventListener('wheel', onWheel, {\n            passive: false,\n        });\n\n        return () => {\n            $current?.removeEventListener('touchmove', onTouch);\n            document.removeEventListener('wheel', onWheel);\n        };\n    }, [\n        center,\n        onValueChange,\n        data.stepAngleDeg,\n        pointer,\n        setPointer,\n        settings.disabled,\n        settings.mousewheelDisabled,\n    ]);\n\n    return (\n        <>\n            {\n                center &&\n                <g\n                    ref={ pointerRef }\n                    transform={ `translate(${ center[0] - radius/2 }, ${ center[1] - radius/2 })` }\n\n                    role=\"slider\"\n                    aria-disabled={ pointer.disabled ? true : undefined }\n                    aria-valuenow={ pointer.angleDeg }\n                    aria-valuetext={ value }\n                    aria-label={ pointer.ariaLabel }\n\n                    data-type={ 'pointer' }\n                    data-angle={ pointer.angleDeg }\n                    data-id={ pointer.id }\n                    data-index={ pointer.index }\n\n                    onMouseDown={ onMouseDown }\n                    onKeyDown={ onKeyDown }\n                    tabIndex={ 0 }\n\n                    cursor={ pointer.disabled ? 'default' : 'pointer' }\n                    style={ outlineNoneStyle }>\n                    <circle\n                        cx={ radius/2 }\n                        cy={ radius/2 }\n                        r={ radius }\n\n                        fill={ getPointerFill(pointer, pointerRef, bgColor, bgColorSelected, bgColorDisabled) }\n                        strokeWidth={ border }\n                        stroke={ borderColor }\n                    />\n                </g>\n            }\n        </>\n    )\n};\n\nexport default Pointer;", "export const outlineNoneStyle = {\n    outline: 'none',\n};", "import { IPointer, IPointers } from '../domain/pointers-provider';\nimport Pointer from './Pointer';\nimport { ISettings } from '../domain/settings-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\nexport interface IPointersProps {\n    pointers: IPointers;\n    settings: ISettings;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n    data: IData;\n}\n\nconst Pointers = (props: IPointersProps) => {\n\n    const { pointers, settings, svg, $svg, setPointer, data } = props;\n\n    return (\n        <>\n            {\n                pointers.pointers.map(pointer => {\n\n                    return (\n                        <Pointer\n                            key={ pointer.id }\n                            pointer={ pointer }\n                            svg={ svg }\n                            settings={ settings }\n                            $svg={ $svg }\n                            setPointer={ setPointer }\n                            data={ data }\n                        />\n                    )\n                })\n            }\n        </>\n    )\n};\n\nexport default Pointers;", "import { ISettings } from './settings-provider';\nimport { getNumber } from './common-provider';\nimport {\n    DEFAULT_ARROW_STEP,\n    DEFAULT_MAX,\n    DEFAULT_MIN,\n    DEFAULT_PATH_END_ANGLE,\n    DEFAULT_PATH_START_ANGLE,\n    DEFAULT_ROUND,\n    DEFAULT_STEP\n} from './defaults-provider';\nimport { mod } from 'mz-math';\n\nexport interface IData {\n    min: number;\n    max: number;\n    stepAngleDeg: number;\n    arrowStepAngleDeg: number;\n    round: number;\n    data: (string | number)[];\n    isClosedShape: boolean;\n}\n\nexport const getData = (setting: ISettings) : IData => {\n\n    let min = getNumber(setting.min, DEFAULT_MIN);\n    let max = getNumber(setting.max, DEFAULT_MAX);\n    const step = getNumber(setting.step, DEFAULT_STEP);\n    const arrowStep = getNumber(setting.arrowStep, DEFAULT_ARROW_STEP);\n    const round = getNumber(setting.round, DEFAULT_ROUND);\n    const data = setting.data || [];\n\n    if(data.length > 0) {\n        const minIndex = data.findIndex(item => item === min);\n        const maxIndex = data.findIndex(item => item === max);\n\n        min = minIndex === -1 ? 0 : minIndex;\n        max = maxIndex === -1 ? data.length : maxIndex;\n    }\n    else{\n        if(min > max) {\n            min = max + DEFAULT_MAX;\n        }\n    }\n\n    const pathStartAngle = getNumber(setting.pathStartAngle, DEFAULT_PATH_START_ANGLE);\n    const pathEndAngle = getNumber(setting.pathEndAngle, DEFAULT_PATH_END_ANGLE);\n    const isClosedShape = mod(pathStartAngle, 360) === mod(pathEndAngle, 360);\n\n    const stepAngleDeg = step * 360 / (max - min);\n    const arrowStepAngleDeg = arrowStep * 360 / (max - min);\n\n    return {\n        min,\n        max,\n        round,\n        data,\n        stepAngleDeg,\n        arrowStepAngleDeg,\n        isClosedShape,\n    }\n};", "import { ISettings } from '../domain/settings-provider';\nimport { getBoolean, getString } from '../domain/common-provider';\nimport { DEFAULT_CONNECTION_BG_COLOR, DEFAULT_CONNECTION_BG_COLOR_DISABLED } from '../domain/defaults-provider';\nimport {\n    getAngleByMouse,\n    getClosestPointer,\n    getMinMaxDistancePointers,\n    IPointer,\n    IPointers\n} from '../domain/pointers-provider';\nimport {\n    MouseEvent as ReactMouseEvent,\n    useCallback,\n    useEffect, useRef,\n    useState\n} from 'react';\nimport { getConnection, IConnection } from '../domain/connection-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\ninterface IConnectionProps {\n    settings: ISettings;\n    pointers: IPointers;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    data: IData;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n}\n\nconst Connection = (props: IConnectionProps) => {\n\n    const { settings, pointers, $svg, svg, data, setPointer } = props;\n\n    const [ connection, setConnection ] = useState<IConnection|null>(null);\n\n    const rangeDraggingLastAngle = useRef<number>();\n\n    useEffect(() => {\n        setConnection(getConnection(\n            pointers,\n            svg.radius,\n            svg.cx,\n            svg.cy,\n            svg.startAngleDeg,\n            svg.endAngleDeg\n        ));\n    }, [\n        pointers,\n        svg.radius,\n        svg.cx,\n        svg.cy,\n        svg.startAngleDeg,\n        svg.endAngleDeg\n    ]);\n\n    const onClick = (evt: ReactMouseEvent) => {\n        if(!$svg || settings.disabled) return;\n\n        const degrees = getAngleByMouse(\n            $svg,\n            evt.clientX,\n            evt.clientY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        const closestPointer = getClosestPointer(\n            pointers.pointers,\n            degrees,\n            svg.cx,\n            svg.cy,\n            svg.radius\n        );\n\n        if(!closestPointer) return;\n\n        setPointer(closestPointer, degrees);\n    };\n\n    const onValueChange = useCallback((evt: MouseEvent | ReactMouseEvent) => {\n        if(!$svg || settings.disabled || !settings.rangeDragging) return;\n\n        const minMaxResult = getMinMaxDistancePointers(pointers.pointers, svg.startAngleDeg);\n        if(!minMaxResult) return;\n\n        const [ minPointer, maxPointer ] = minMaxResult;\n\n        const mouseDegrees = getAngleByMouse(\n            $svg,\n            evt.clientX,\n            evt.clientY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        if(rangeDraggingLastAngle.current === undefined) {\n            rangeDraggingLastAngle.current = mouseDegrees;\n            return;\n        }\n\n        const diff = (mouseDegrees - rangeDraggingLastAngle.current);\n        if(diff === 0 || Math.abs(diff) < data.stepAngleDeg) return;\n\n        setPointer(minPointer, minPointer.angleDeg + diff);\n        setPointer(maxPointer, maxPointer.angleDeg + diff);\n\n        rangeDraggingLastAngle.current = mouseDegrees;\n    }, [\n        $svg,\n        svg.cx,\n        svg.cy,\n        svg.radius,\n        data.stepAngleDeg,\n        pointers.pointers,\n        setPointer,\n        settings.disabled,\n        settings.rangeDragging,\n        svg.startAngleDeg,\n    ]);\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onValueChange);\n        window.removeEventListener('mouseup', onValueChange);\n\n        rangeDraggingLastAngle.current = undefined;\n    };\n\n    const onMouseDown = (evt: ReactMouseEvent) => {\n        if(!settings.rangeDragging || settings.disabled || pointers.pointers.length <= 1) return;\n\n        onValueChange(evt);\n\n        window.addEventListener('mousemove', onValueChange);\n        window.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <>\n            {\n                !getBoolean(settings.hideConnection, false) && connection &&\n                <circle\n                    data-type=\"connection\"\n\n                    cx={ connection.cx }\n                    cy={ connection.cy }\n                    r={ connection.radius }\n\n                    strokeDasharray={ connection.strokeDasharray.join(' ') }\n                    strokeDashoffset={ connection.strokeOffset }\n                    stroke={\n                        settings.disabled ?\n                        getString(settings.connectionBgColorDisabled, DEFAULT_CONNECTION_BG_COLOR_DISABLED) :\n                        getString(settings.connectionBgColor, DEFAULT_CONNECTION_BG_COLOR)\n                    }\n                    strokeWidth={ svg.thickness + 1 }\n\n                    fill=\"none\"\n                    shapeRendering=\"geometricPrecision\"\n                    strokeLinecap=\"round\"\n                    cursor={ settings.disabled ? 'default' : 'pointer' }\n\n                    onClick={ onClick }\n                    onMouseDown={ onMouseDown }\n                />\n            }\n        </>\n    )\n};\n\nexport default Connection;", "import { getMinMaxDistancePointers, IPointers } from './pointers-provider';\nimport { getAnglesDistance } from './circle-provider';\n\nexport interface IConnection {\n    radius: number;\n    cx: number;\n    cy: number;\n\n    // calculated properties ---------\n    startAngleDeg: number;\n    endAngleDeg: number;\n    strokeDasharray: number[];\n    strokeOffset: number;\n}\n\nexport const getConnection = (\n    pointers: IPointers,\n    radius: number,\n    cx: number,\n    cy: number,\n    pathStartAngle: number,\n    pathEndAngle: number,\n) : IConnection => {\n\n    if(!pointers.pointers || pointers.pointers.length <= 0) return null;\n\n    const result : IConnection = {\n        radius,\n        cx,\n        cy,\n\n        // calculated properties ---------\n        startAngleDeg: pathStartAngle,\n        endAngleDeg: pathStartAngle,\n        strokeDasharray: [0, 0],\n        strokeOffset: 0,\n    };\n\n    // Define start/end angles.\n    if(pointers.pointers.length === 1) {\n        result.startAngleDeg = pathStartAngle;\n        result.endAngleDeg = pointers.pointers[0].angleDeg;\n    }\n    else{\n        const minMaxResult = getMinMaxDistancePointers(pointers.pointers, pathStartAngle);\n        if(!minMaxResult) return null;\n\n        const [ minPointer, maxPointer ] = minMaxResult;\n\n        result.startAngleDeg = minPointer.angleDeg;\n        result.endAngleDeg = maxPointer.angleDeg;\n    }\n\n    const pathAnglesDistance = getAnglesDistance(pathStartAngle, pathEndAngle);\n\n    if(result.startAngleDeg > result.endAngleDeg) {\n        result.endAngleDeg += 360;\n    }\n\n    let angleDistance = getAnglesDistance(result.startAngleDeg, result.endAngleDeg);\n\n    const shouldSwitch = angleDistance > pathAnglesDistance;\n\n    if(shouldSwitch) {\n        angleDistance = 360 - angleDistance;\n        [result.startAngleDeg, result.endAngleDeg] = [result.endAngleDeg, result.startAngleDeg];\n    }\n\n    const circumference = 2 * Math.PI * radius;\n    const strokeOffset = -(result.startAngleDeg / 360) * circumference;\n    const strokeDasharray = (angleDistance / 360) * circumference;\n    const complement = circumference - strokeDasharray;\n\n    result.strokeDasharray = [ strokeDasharray, complement ];\n    result.strokeOffset = strokeOffset;\n\n    return result;\n};", "import { ISettings } from '../domain/settings-provider';\nimport { angle2value, IPointers } from '../domain/pointers-provider';\nimport { getBoolean, getNumber, getString } from '../domain/common-provider';\nimport {\n    DEFAULT_TEXT_COLOR,\n    DEFAULT_TEXT_FONT_SIZE\n} from '../domain/defaults-provider';\nimport { useEffect, useState } from 'react';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\ninterface ITextProps {\n    settings: ISettings;\n    pointers: IPointers;\n    svg: ISvg;\n    data: IData;\n}\n\nconst Text = (props: ITextProps) => {\n\n    const { settings, pointers, svg, data } = props;\n\n    const { cx, cy } = svg;\n    const [ value, setValue ] = useState('');\n\n    useEffect(() => {\n\n        const values = pointers.pointers.map(pointer => angle2value(\n            data,\n            pointer.angleDeg,\n            svg.startAngleDeg,\n            svg.endAngleDeg\n        ));\n\n        values.sort((value1, value2) => {\n            return value1.toString().localeCompare(\n                value2.toString(),\n                'en',\n                { numeric: true }\n            );\n        });\n\n        const texts = values.map(value => `${ settings.textPrefix || '' }${ value }${ settings.textSuffix || '' }`);\n        setValue(texts.join(' '));\n\n    }, [\n        data,\n        pointers.pointers,\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n        settings.textPrefix,\n        settings.textSuffix,\n    ]);\n\n    const hideText = getBoolean(settings.hideText, false);\n\n    return (\n        <>\n            {\n                !hideText &&\n                <text\n                    x={ cx }\n                    y={ cy }\n                    fill={ getString(settings.textColor, DEFAULT_TEXT_COLOR) }\n                    fontSize={ getNumber(settings.textFontSize, DEFAULT_TEXT_FONT_SIZE) }\n                    fontFamily={ settings.textFontFamily }\n                    style={{\n                        userSelect: 'none'\n                    }}\n                    textAnchor=\"middle\">\n\n                    { value }\n\n                </text>\n            }\n        </>\n    )\n};\n\nexport default Text;", "import { useEffect, useState, Fragment } from 'react';\nimport { getTicks, getTicksSettings, ITick, ITicks } from '../domain/ticks-provider';\nimport { ISettings } from '../domain/settings-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { IData } from '../domain/data-provider';\n\ninterface ITicksProps {\n    settings: ISettings;\n    svg: ISvg;\n    data: IData;\n}\n\nconst Ticks = (props: ITicksProps) => {\n\n    const { settings, svg, data } = props;\n\n    const [ ticksSettings, setTicksSettings ] = useState<ITicks|null>(null);\n    const [ ticks, setTicks ] = useState<ITick[]>([]);\n\n    useEffect(() => {\n       setTicksSettings(getTicksSettings(settings, data));\n    }, [\n        settings,\n        data,\n    ]);\n\n    useEffect(() => {\n        if(!ticksSettings) return;\n\n        let endAngleDeg = svg.endAngleDeg;\n        if(endAngleDeg < svg.startAngleDeg) {\n            endAngleDeg += 360;\n        }\n\n        setTicks(getTicks(\n            ticksSettings,\n            ticksSettings.ticksCount,\n            svg.startAngleDeg,\n            endAngleDeg,\n            svg,\n            data\n        ));\n    }, [\n        data,\n        svg,\n        ticksSettings,\n    ]);\n\n    return (\n        <>\n            {\n                ticksSettings && !ticksSettings.disableTicks &&\n                <g>\n                    {\n                        ticks.map((tick, i) => {\n                            const { x, y, x1, y1, textX, textY, showText } = tick;\n\n                            return (\n                                <Fragment key={ i }>\n                                    <line\n                                        x1={ x }\n                                        y1={ y }\n                                        x2={ x1 }\n                                        y2={ y1 }\n                                        strokeWidth={ ticksSettings.ticksWidth }\n                                        stroke={ ticksSettings.ticksColor }\n                                    />\n\n                                    {\n                                        showText &&\n                                        <text\n                                            x={ textX }\n                                            y={ textY }\n                                            textAnchor=\"middle\"\n                                            dominantBaseline=\"middle\"\n                                            fill={ ticksSettings.tickValuesColor }\n                                            fontSize={ ticksSettings.tickValuesFontSize }\n                                            fontFamily={ settings.tickValuesFontFamily }\n                                            style={{\n                                                userSelect: 'none'\n                                            }}>\n                                            { tick.tickValue }\n                                        </text>\n                                    }\n                                </Fragment>\n                            );\n                        })\n                    }\n                </g>\n            }\n        </>\n    )\n};\n\nexport default Ticks;", "import {\n    circleMovement,\n    convertRange,\n    degreesToRadians,\n    setDecimalPlaces,\n    v2MulScalar,\n    v2Normalize\n} from 'mz-math';\nimport { ISvg } from './svg-provider';\nimport { IData } from './data-provider';\nimport { ISettings } from './settings-provider';\nimport { getBoolean, getNumber, getString } from './common-provider';\nimport {\n    DEFAULT_TICKS_COLOR, DEFAULT_TICKS_GROUP_SIZE,\n    DEFAULT_TICKS_HEIGHT, DEFAULT_TICKS_VALUES_COLOR,\n    DEFAULT_TICKS_VALUES_DISTANCE, DEFAULT_TICKS_VALUES_FONT_SIZE,\n    DEFAULT_TICKS_WIDTH\n} from './defaults-provider';\n\nexport interface ITicks {\n    ticksCount: number;\n    disableTicks: boolean;\n    ticksWidth: number;\n    ticksHeight: number;\n    longerTicksHeight: number;\n    ticksDistanceToPanel: number;\n    tickValuesDistance: number;\n    ticksColor: string;\n    tickValuesColor: string;\n    tickValuesFontSize: number;\n    ticksGroupSize: number;\n    longerTickValuesOnly: boolean;\n    showTickValues: boolean;\n}\n\nexport interface ITick {\n    x: number;\n    y: number;\n    x1: number;\n    y1: number;\n    textX: number;\n    textY: number;\n    isLonger: boolean;\n    showText: boolean;\n    tickValue?: string;\n}\n\nexport const getTicksSettings = (settings: ISettings, data: IData) : ITicks => {\n\n    let ticksCount = getNumber(settings.ticsCount, 0);\n    if(!ticksCount) {\n        if(data.data && data.data.length > 0) {\n            ticksCount = data.data.length;\n        }\n        else{\n            ticksCount = data.max;\n        }\n    }\n\n    const ticksHeight = getNumber(settings.ticksHeight, DEFAULT_TICKS_HEIGHT);\n\n    return {\n        ticksCount,\n        disableTicks: getBoolean(settings.disableTicks, false),\n        ticksWidth: getNumber(settings.ticksWidth, DEFAULT_TICKS_WIDTH),\n        ticksHeight,\n        longerTicksHeight: getNumber(settings.longerTicksHeight, ticksHeight * 2),\n        ticksDistanceToPanel: getNumber(settings.ticksDistanceToPanel, 0),\n        tickValuesDistance: getNumber(settings.tickValuesDistance, DEFAULT_TICKS_VALUES_DISTANCE),\n        ticksColor: getString(settings.ticksColor, DEFAULT_TICKS_COLOR),\n        tickValuesColor: getString(settings.tickValuesColor, DEFAULT_TICKS_VALUES_COLOR),\n        tickValuesFontSize: getNumber(settings.tickValuesFontSize, DEFAULT_TICKS_VALUES_FONT_SIZE),\n        ticksGroupSize: getNumber(settings.ticksGroupSize, DEFAULT_TICKS_GROUP_SIZE),\n        longerTickValuesOnly: getBoolean(settings.longerTickValuesOnly, true),\n        showTickValues: getBoolean(settings.showTickValues, true),\n    };\n};\n\nexport const getTicks = (\n    ticksSettings: ITicks,\n    ticsCount: number,\n    pathStartAngle: number,\n    pathEndAngle: number,\n    svg: ISvg,\n    data: IData\n) : ITick[] => {\n\n    const ticks: ITick[] = [];\n\n    const deltaAngle = Math.abs(pathEndAngle - pathStartAngle);\n    const oneTickAngleSize = ticsCount === 0 ? 0 : deltaAngle / ticsCount;\n\n    let count = ticsCount;\n    if(!data.isClosedShape) {\n        count++;\n    }\n\n    for(let i=0; i<count; i++) {\n        const currentAngle = pathStartAngle + i * oneTickAngleSize;\n        const angleRad = convertRange(degreesToRadians(currentAngle), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\n\n        let [x, y] = circleMovement([svg.cx, svg.cy], angleRad, svg.radius);\n\n        const isLonger = ticksSettings.ticksGroupSize !== undefined && (i % ticksSettings.ticksGroupSize === 0 );\n\n        let desiredDistance = ticksSettings.ticksHeight;\n\n        if(isLonger) {\n            desiredDistance = ticksSettings.longerTicksHeight;\n        }\n\n        const normalizedDirectionVector = v2Normalize([svg.cx - x, svg.cy - y]);\n        const tickEndVector = v2MulScalar(normalizedDirectionVector, desiredDistance);\n\n        const tickStartVector = v2MulScalar(normalizedDirectionVector, ticksSettings.ticksDistanceToPanel);\n        x += tickStartVector[0];\n        y += tickStartVector[1];\n\n        const x1 = x + tickEndVector[0];\n        const y1 = y + tickEndVector[1];\n\n        // ------- Define tick value. ---------------------\n        let tickValue: string|undefined = undefined;\n        if(ticksSettings.showTickValues && (!ticksSettings.longerTickValuesOnly || ticksSettings.longerTickValuesOnly && (isLonger || ticksSettings.ticksGroupSize === undefined))) {\n\n            let value: string|number = convertRange(i, 0, ticsCount, data.min, data.max);\n\n            if(data.data.length > 0) {\n                const index = Math.round(value);\n                value = data.data[index];\n            }\n            else{\n                value = setDecimalPlaces(value, data.round);\n            }\n\n            tickValue = (value ?? '').toString();\n        }\n\n        let textX = 0;\n        let textY = 0;\n        const showText = tickValue !== undefined;\n\n        if(showText) {\n            const _tickValuesDistance = getNumber(desiredDistance + ticksSettings.tickValuesDistance, desiredDistance * 1.5);\n            const tickTextVector = v2MulScalar(normalizedDirectionVector, _tickValuesDistance);\n            textX = x + tickTextVector[0];\n            textY = y + tickTextVector[1];\n        }\n\n        ticks.push({\n            x,\n            y,\n            x1,\n            y1,\n            textX,\n            textY,\n            isLonger,\n            tickValue,\n            showText,\n        });\n    }\n\n    return ticks;\n};", "import { useEffect, useState, MouseEvent } from 'react';\nimport { getCircle, ICircle } from '../domain/circle-provider';\nimport { getString } from '../domain/common-provider';\nimport { ISettings } from '../domain/settings-provider';\nimport {\n    DEFAULT_PATH_BG_COLOR,\n    DEFAULT_PATH_BORDER_COLOR,\n} from '../domain/defaults-provider';\nimport { ISvg } from '../domain/svg-provider';\nimport { getAngleByMouse, getClosestPointer, IPointer, IPointers } from '../domain/pointers-provider';\n\ninterface ICircleProps {\n    settings: ISettings;\n    pointers: IPointers;\n    svg: ISvg;\n    $svg: SVGSVGElement;\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\n}\n\nconst Circle = (props: ICircleProps) => {\n\n    const { settings, pointers, $svg, svg, setPointer } = props;\n    const [ circle, setCircle ] = useState<ICircle>({\n        strokeDasharray: '0 1000000',\n        strokeOffset: 0,\n    });\n\n    useEffect(() => {\n        setCircle(getCircle(\n            svg.startAngleDeg,\n            svg.endAngleDeg,\n            svg.radius\n        ));\n    }, [\n        svg.startAngleDeg,\n        svg.endAngleDeg,\n        svg.radius,\n    ]);\n\n    const onClick = (evt: MouseEvent) => {\n        if(!$svg || settings.disabled) return;\n\n        const degrees = getAngleByMouse(\n            $svg,\n            evt.clientX,\n            evt.clientY,\n            svg.cx,\n            svg.cy,\n            svg.radius,\n            svg.radius\n        );\n\n        const closestPointer = getClosestPointer(\n            pointers.pointers,\n            degrees,\n            svg.cx,\n            svg.cy,\n            svg.radius\n        );\n\n        if(!closestPointer) return;\n\n        setPointer(closestPointer, degrees);\n    };\n\n    return (\n        <g onClick={ onClick }>\n            {\n                svg.border > 0 &&\n                <circle\n                    strokeDasharray={ circle.strokeDasharray }\n                    strokeDashoffset={ circle.strokeOffset }\n                    cx={ svg.cx }\n                    cy={ svg.cy }\n                    r={ svg.radius }\n                    stroke={ getString(settings.pathBorderColor, DEFAULT_PATH_BORDER_COLOR) }\n                    strokeWidth={ svg.thickness + svg.border * 2 }\n                    fill=\"none\"\n                    shapeRendering=\"geometricPrecision\"\n                    strokeLinecap=\"round\"\n                    cursor=\"pointer\"\n                    data-type=\"path-border\"\n                />\n            }\n\n            <circle\n                strokeDasharray={ circle.strokeDasharray }\n                strokeDashoffset={ circle.strokeOffset }\n                cx={ svg.cx }\n                cy={ svg.cy }\n                r={ svg.radius }\n                stroke={ getString(settings.pathBgColor, DEFAULT_PATH_BG_COLOR) }\n                strokeWidth={ svg.thickness }\n                fill=\"none\"\n                shapeRendering=\"geometricPrecision\"\n                strokeLinecap=\"round\"\n                cursor=\"pointer\"\n                data-type=\"path\"\n            />\n        </g>\n    )\n};\n\nexport default Circle;\n"],
  "mappings": "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",
  "names": ["useEffect", "useRef", "useState", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "isNumber", "value", "radiansToDegrees", "radians", "decimalPlaces", "res", "setDecimalPlaces", "degreesToRadians", "degrees", "vSub", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2Sub", "vMulScalar", "v", "scalar", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2MulScalar", "v2", "vLength", "vector", "decimalPlaces", "sum", "i", "setDecimalPlaces", "v2Distance", "vector1", "vector2", "decimalPlaces", "diff", "vSub", "vLength", "vNormalize", "v", "decimalPlaces", "length", "vLength", "unitVector", "i", "setDecimalPlaces", "v2Normalize", "v2", "circleMovement", "center", "angle", "radius", "newId", "getSvg", "circleRadius", "circleThickness", "circleBorder", "maxPointerRadius", "startAngleDeg", "endAngleDeg", "thickness", "diff", "size", "cx", "cy", "getSVGCenter", "getSVGSize", "val", "s", "DEFAULT_PATH_BG_COLOR", "DEFAULT_PATH_BORDER_COLOR", "DEFAULT_POINTER_BG_COLOR", "DEFAULT_POINTER_BG_COLOR_SELECTED", "DEFAULT_POINTER_BG_COLOR_DISABLED", "DEFAULT_POINTER_BORDER_COLOR", "DEFAULT_CONNECTION_BG_COLOR", "DEFAULT_CONNECTION_BG_COLOR_DISABLED", "DEFAULT_TEXT_COLOR", "DEFAULT_TICKS_COLOR", "DEFAULT_TICKS_VALUES_COLOR", "getNumber", "value", "defaultValue", "H", "getString", "getBoolean", "isAngleInArc", "startAngleDeg", "endAngleDeg", "currentDegrees", "getAnglesDistance", "startAngle", "endAngle", "diff", "diffMod", "I", "getCircle", "radius", "circumference", "angleDiff", "strokeOffset", "strokeDasharray", "complement", "getAngleByMouse", "$svg", "clientX", "clientY", "cx", "cy", "rx", "ry", "left", "top", "relativeMouse", "vector", "R", "angleRad", "fr", "angle2value", "data", "angle", "pathStartAngle", "pathEndAngle", "value", "O", "index", "s", "value2angle", "_value", "valueIndex", "item", "I", "initPointers", "settings", "Lo", "getNumber", "getString", "DEFAULT_POINTER_BG_COLOR", "DEFAULT_POINTER_BG_COLOR_SELECTED", "DEFAULT_POINTER_BG_COLOR_DISABLED", "DEFAULT_POINTER_BORDER_COLOR", "pointers", "i", "settingPointer", "bgColor", "bgColorSelected", "bgColorDisabled", "border", "borderColor", "disabled", "getBoolean", "angleDeg", "angleAfterStep", "roundToStep", "getPointers", "getMaxRadius", "max", "pointer", "getClosestPointer", "currentPlaceDegrees", "pathRadius", "pr", "currentPointOnArc", "_t", "min", "closestPointer", "enabledPointers", "p", "pointerAngleRad", "pointOnArc", "distance", "Hr", "__spreadValues", "getClosestEdge", "startAngleDegrees", "endAngleDegrees", "startAngleRad", "startPointOnArc", "endAngleRad", "endPointOnArc", "distance1", "distance2", "getMinMaxDistancePointers", "minDistance", "maxDistance", "minPointer", "maxPointer", "getAnglesDistance", "num", "step", "useEffect", "useState", "useRef", "useCallback", "outlineNoneStyle", "Fragment", "jsx", "getPointerFill", "pointer", "pointerRef", "bgColor", "bgColorSelected", "bgColorDisabled", "Pointer", "props", "useRef", "svg", "$svg", "setPointer", "data", "settings", "radius", "angleDeg", "border", "borderColor", "cx", "cy", "center", "setCenter", "useState", "value", "setValue", "useEffect", "angle2value", "angleRad", "O", "pr", "pointerCenter", "_t", "onValueChange", "useCallback", "evt", "mouseX", "mouseY", "degrees", "getAngleByMouse", "newAngleDeg", "isAngleInArc", "getClosestEdge", "onMouseUp", "onMouseDown", "onKeyDown", "$current", "onTouch", "onWheel", "scrollTop", "outlineNoneStyle", "Pointer_default", "Fragment", "jsx", "Pointers", "props", "pointers", "settings", "svg", "$svg", "setPointer", "data", "pointer", "Pointer_default", "Pointers_default", "getData", "setting", "min", "getNumber", "max", "step", "arrowStep", "round", "data", "minIndex", "item", "maxIndex", "pathStartAngle", "pathEndAngle", "isClosedShape", "I", "stepAngleDeg", "arrowStepAngleDeg", "useCallback", "useEffect", "useRef", "useState", "getConnection", "pointers", "radius", "cx", "cy", "pathStartAngle", "pathEndAngle", "result", "minMaxResult", "getMinMaxDistancePointers", "minPointer", "maxPointer", "pathAnglesDistance", "getAnglesDistance", "angleDistance", "circumference", "strokeOffset", "strokeDasharray", "complement", "Fragment", "jsx", "Connection", "props", "settings", "pointers", "$svg", "svg", "data", "setPointer", "connection", "setConnection", "useState", "rangeDraggingLastAngle", "useRef", "useEffect", "getConnection", "onClick", "evt", "degrees", "getAngleByMouse", "closestPointer", "getClosestPointer", "onValueChange", "useCallback", "minMaxResult", "getMinMaxDistancePointers", "minPointer", "maxPointer", "mouseDegrees", "diff", "onMouseUp", "onMouseDown", "getBoolean", "getString", "DEFAULT_CONNECTION_BG_COLOR_DISABLED", "DEFAULT_CONNECTION_BG_COLOR", "Connection_default", "useEffect", "useState", "Fragment", "jsx", "Text", "props", "settings", "pointers", "svg", "data", "cx", "cy", "value", "setValue", "values", "pointer", "angle2value", "value1", "value2", "texts", "hideText", "getBoolean", "getString", "DEFAULT_TEXT_COLOR", "getNumber", "Text_default", "useEffect", "useState", "Fragment", "getTicksSettings", "settings", "data", "ticksCount", "getNumber", "ticksHeight", "getBoolean", "getString", "DEFAULT_TICKS_COLOR", "DEFAULT_TICKS_VALUES_COLOR", "getTicks", "ticksSettings", "ticsCount", "pathStartAngle", "pathEndAngle", "svg", "ticks", "deltaAngle", "oneTickAngleSize", "count", "i", "currentAngle", "angleRad", "O", "pr", "x", "y", "_t", "isLonger", "desiredDistance", "normalizedDirectionVector", "D", "tickEndVector", "vr", "tickStartVector", "x1", "y1", "tickValue", "value", "index", "s", "textX", "textY", "showText", "_tickValuesDistance", "tickTextVector", "Fragment", "jsx", "jsxs", "Ticks", "props", "settings", "svg", "data", "ticksSettings", "setTicksSettings", "useState", "ticks", "setTicks", "useEffect", "getTicksSettings", "endAngleDeg", "getTicks", "tick", "i", "x", "y", "x1", "y1", "textX", "textY", "showText", "Ticks_default", "useEffect", "useState", "jsx", "jsxs", "Circle", "props", "settings", "pointers", "$svg", "svg", "setPointer", "circle", "setCircle", "useState", "useEffect", "getCircle", "evt", "degrees", "getAngleByMouse", "closestPointer", "getClosestPointer", "getString", "DEFAULT_PATH_BORDER_COLOR", "DEFAULT_PATH_BG_COLOR", "Circle_default", "Fragment", "jsx", "jsxs", "RoundSlider", "props", "data", "setData", "useState", "svg", "setSvg", "pointers", "setPointers", "svgRef", "useRef", "useEffect", "getData", "getPointers", "pathStartAngle", "getNumber", "pathEndAngle", "getSvg", "setPointersCallback", "pointer", "newAngleDeg", "roundToStep", "I", "prevAngle", "nextAngle", "prevIndex", "nextIndex", "isAngleInArc", "getClosestEdge", "_pointers", "__spreadValues", "values", "angle2value", "outlineNoneStyle", "Ticks_default", "Circle_default", "Connection_default", "Pointers_default", "Text_default"]
}
