{
  "version": 3,
  "sources": ["../node_modules/react/cjs/react.production.min.js", "../node_modules/react/index.js", "../node_modules/react/cjs/react-jsx-runtime.production.min.js", "../node_modules/react/jsx-runtime.js", "../src/core/index.tsx", "../node_modules/mz-math/src/main/format.ts", "../node_modules/mz-math/src/main/other.ts", "../node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-math/src/main/random.ts", "../node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-math/src/main/color.ts", "../node_modules/mz-math/src/main/id.ts", "../node_modules/mz-math/src/main/shapes.ts", "../node_modules/mz-math/src/main/collision-detection.ts", "../node_modules/mz-math/src/main/animation.ts", "../src/core/domain/common.ts", "../src/core/domain/defaults.ts", "../src/core/domain/angles-provider.ts", "../src/core/domain/slider-provider.ts", "../src/core/domain/svg-provider.tsx", "../src/core/ui/Panel.tsx", "../src/core/ui/Connection.tsx", "../src/core/ui/Pointer.tsx", "../src/core/ui/Text.tsx", "../src/core/ui/Ticks.tsx"],
  "sourcesContent": ["/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n", "/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n", "import { IEllipse, IStatePointer, IUserSettings } from './interfaces';\nimport {\n    useEffect, useRef, useState,\n    MouseEvent as ReactMouseEvent,\n    TouchEvent as ReactTouchEvent,\n    KeyboardEvent, WheelEvent, CSSProperties,\n} from 'react';\nimport { isNumber, mod, Vector2 } from 'mz-math';\nimport {\n    getActivePointerId,\n    getInitialPointers,\n    getMaxPointer,\n    getMinMax, getPointerIndexById, getPointerPercentByMouse, getStepPercent, getValueByPercent, handleOverlap,\n    updateMultiplePointersValue, updateSinglePointerValue\n} from './domain/slider-provider';\nimport { getEllipseSegment, getSVGCenter, getSVGSize } from './domain/svg-provider';\nimport { getBoolean, getNumber, getString } from './domain/common';\nimport {\n    DEFAULT_BG_COLOR,\n    DEFAULT_CONNECTION_BG_COLOR, DEFAULT_POINTER_BG_COLOR,\n    DEFAULT_STROKE_WIDTH,\n    DEFAULT_SVG_RX,\n    DEFAULT_SVG_RY, DEFAULT_SVG_STYLE,\n    DISABLED_POINTER_STYLE, POINTER_OVERLAP_DEFAULT,\n    ROUND_DEFAULT, TICKS_HEIGHT_DEFAULT, TICKS_WIDTH_DEFAULT,\n} from './domain/defaults';\nimport Panel from './ui/Panel';\nimport { normalizeAngles } from './domain/angles-provider';\nimport Connection from './ui/Connection';\nimport Pointer from './ui/Pointer';\nimport Text from './ui/Text';\nimport Ticks from './ui/Ticks';\n\nexport const RoundSlider = (props: IUserSettings) => {\n\n    const svgRef = useRef<SVGSVGElement>(null);\n    const sliderRef = useRef<SVGPathElement>(null);\n    const isClickOrDrag = useRef<'click'|'drag'>('click');``\n\n    const [ selectedPointerId, setSelectedPointerId ] = useState<string|null>(null);\n    const [ svgRadii, setSvgRadii ] = useState<Vector2>([0, 0]);\n    const [ panelStrokeWidth, setPanelStrokeWidth ] = useState(0);\n    const [ minMax, setMinMax ] = useState<Vector2>([0, 0]);\n    const [ pointers, setPointers ] = useState<IStatePointer[]>([]);\n    const [ maxPointer, setMaxPointer ] = useState<Vector2>([0, 0]);\n    const [ svgSize, setSvgSize ] = useState<Vector2>([0, 0]);\n    const [ svgCenter, setSvgCenter ] = useState<Vector2>([0, 0]);\n    const [ startEndAngle, setStartEndAngle ] = useState<Vector2>([0, 0]);\n    const [ ellipse, setEllipse ] = useState<IEllipse>( {\n        start: [ 0, 0 ],\n        end: [ 0, 0 ],\n        largeArcFlag: 0,\n    });\n    const [ panelBgColor, setPanelBgColor ] = useState(DEFAULT_BG_COLOR);\n    const [ connectionBgColor, setConnectionBgColor ] = useState(DEFAULT_CONNECTION_BG_COLOR);\n    const [ pointerBgColor, setPointerBgColor ] = useState(DEFAULT_POINTER_BG_COLOR);\n    const [ pointersOverlap, setPointersOverlap ] = useState(false);\n    const [ disabled, setDisabled ] = useState(false);\n    const [ disabledPointerStyle , setDisabledPointerStyle ] = useState<CSSProperties|undefined>(undefined);\n    const [ keyboardDisabled, setKeyboardDisabled ] = useState(false);\n    const [ mousewheelDisabled, setMousewheelDisabled ] = useState(false);\n    const [ round, setRound ] = useState(ROUND_DEFAULT);\n    const [ stepPercent, setStepPercent ] = useState<number|undefined>(undefined);\n\n    const [ min, max ] = minMax;\n    const [ svgWidth, svgHeight ] = svgSize;\n    const [ startAngleDegrees, endAngleDegrees ] = startEndAngle;\n\n    // text value ------------------\n    const [ hideText, setHideText ] = useState(false);\n    const [ textPrefix, setTextPrefix ] = useState('');\n    const [ textSuffix, setTextSuffix ] = useState('');\n\n    // ticks -----------------------\n    const [ disableTicks, setDisableTicks ] = useState(false);\n    const [ ticksWidth, setTicksWidth ] = useState(TICKS_WIDTH_DEFAULT);\n    const [ ticksHeight, setTicksHeight ] = useState(TICKS_HEIGHT_DEFAULT);\n    const [ longerTicksHeight, setLongerTicksHeight ] = useState<number|undefined>(undefined);\n    const [ ticsCount, setTicsCount ] = useState(0);\n    const [ ticksDistanceToPanel, setTicksDistanceToPanel ] = useState<number>(0);\n\n    // ---------------- STATE ----------------------------\n\n    useEffect(() => {\n        setStepPercent(getStepPercent(min, max, props.data, props.step));\n    }, [\n        min, max, props.data, props.step\n    ]);\n\n    useEffect(() => {\n        setDisableTicks(getBoolean(props.disableTicks, false));\n        setTicksWidth(getNumber(props.ticksWidth, TICKS_WIDTH_DEFAULT));\n        setTicksDistanceToPanel(getNumber(props.ticksDistanceToPanel, 0));\n\n        const _ticksHeight = getNumber(props.ticksHeight, TICKS_HEIGHT_DEFAULT);\n        setTicksHeight(_ticksHeight);\n        setLongerTicksHeight(getNumber(props.longerTicksHeight, _ticksHeight * 2));\n\n        let ticksCount = getNumber(props.ticsCount, 0);\n        if(!ticksCount) {\n            if(props.data && props.data.length > 0) {\n                ticksCount = props.data.length;\n            }\n            else{\n                const diff = Math.abs(startAngleDegrees - endAngleDegrees) % 360;\n                ticksCount = diff * (max - min) / 360;\n            }\n        }\n\n        setTicsCount(ticksCount);\n    }, [\n        props.disableTicks,\n        props.ticksWidth,\n        props.ticksHeight,\n        props.longerTicksHeight,\n        props.ticsCount,\n        props.ticksDistanceToPanel,\n        max, min, props.data,\n        startAngleDegrees, endAngleDegrees,\n    ]);\n\n    useEffect(() => {\n        setPanelBgColor(getString(props.panelBgColor, DEFAULT_BG_COLOR));\n        setConnectionBgColor(getString(props.connectionBgColor, DEFAULT_CONNECTION_BG_COLOR));\n        setPointerBgColor(getString(props.pointerBgColor, DEFAULT_POINTER_BG_COLOR));\n    }, [\n        props.panelBgColor,\n        props.connectionBgColor,\n        props.pointerBgColor\n    ]);\n\n    useEffect(() => {\n        setPointersOverlap(getBoolean(props.pointersOverlap, POINTER_OVERLAP_DEFAULT));\n    }, [\n        props.pointersOverlap,\n    ]);\n\n    useEffect(() => {\n        setDisabled(getBoolean(props.disabled, false));\n        setDisabledPointerStyle(props.disabledPointerStyle || DISABLED_POINTER_STYLE);\n        setKeyboardDisabled(getBoolean(props.keyboardDisabled, false));\n        setMousewheelDisabled(getBoolean(props.mousewheelDisabled, false));\n    }, [\n        props.disabled,\n        props.disabledPointerStyle,\n        props.keyboardDisabled,\n        props.mousewheelDisabled,\n    ]);\n\n    /**\n     * Define initial SVG circle/ellipse radii.\n     */\n    useEffect(() => {\n        setSvgRadii([\n            getNumber(props.rx, DEFAULT_SVG_RX),\n            getNumber(props.ry, DEFAULT_SVG_RY)\n        ]);\n    }, [\n        props.rx,\n        props.ry,\n    ]);\n\n    /**\n     * Define the initial slider stroke width.\n     */\n    useEffect(() => {\n        setPanelStrokeWidth(getNumber(props.panelStrokeWidth, DEFAULT_STROKE_WIDTH));\n    }, [\n        props.panelStrokeWidth,\n    ]);\n\n    /**\n     * On component init, min and max should be initialized together,\n     * because their validations depend on each other.\n     * In case when the data is provided, min & max represent index in the data array.\n     */\n    useEffect(() => {\n        setMinMax(getMinMax(props.min, props.max, props.data));\n    }, [\n        props.min,\n        props.max,\n        props.data,\n    ]);\n\n    /**\n     * Convert user provided pointers settings to the actual state pointers' definition.\n     */\n    useEffect(() => {\n        setPointers(getInitialPointers(\n            props.pointers,\n            min,\n            max,\n            props.data,\n            pointerBgColor,\n            props.pointerSVG\n        ));\n    }, [\n        props.pointers,\n        props.data,\n        min,\n        max,\n        pointerBgColor,\n        props.pointerSVG,\n    ]);\n\n    /**\n     * Max pointer [rx, ry] is used to define svg size, svg center position,\n     * and also ellipse/circle properties.\n     */\n    useEffect(() => {\n        setMaxPointer(getMaxPointer(pointers));\n    }, [\n        pointers,\n    ]);\n\n    /**\n     * Calculate SVG size depending on ellipse radii and max pointer size.\n     */\n    useEffect(() => {\n        setSvgSize(getSVGSize(svgRadii, maxPointer, panelStrokeWidth));\n    }, [\n        svgRadii,\n        maxPointer,\n        panelStrokeWidth,\n    ]);\n\n    /**\n     * Calculate the center point of the SVG.\n     */\n    useEffect(() => {\n        setSvgCenter(getSVGCenter(svgRadii, maxPointer, panelStrokeWidth));\n    }, [\n        svgRadii,\n        maxPointer,\n        panelStrokeWidth,\n    ]);\n\n    useEffect(() => {\n        setStartEndAngle(normalizeAngles(props.startAngleDegrees, props.endAngleDegrees));\n    }, [\n        props.startAngleDegrees,\n        props.endAngleDegrees,\n    ]);\n\n    /**\n     * Get start & end points of SVG ellipse/circle segment.\n     * Also define the 'large-arc-flag' property of svg path data elliptical arc.\n     */\n    useEffect(() => {\n        setEllipse(getEllipseSegment(\n            startAngleDegrees,\n            endAngleDegrees,\n            svgRadii,\n            maxPointer,\n            panelStrokeWidth\n        ));\n    }, [\n        startAngleDegrees,\n        endAngleDegrees,\n        svgRadii,\n        maxPointer,\n        panelStrokeWidth,\n    ]);\n\n    useEffect(() => {\n        setRound(getNumber(props.round, ROUND_DEFAULT));\n    }, [ props.round ]);\n\n    useEffect(() => {\n        setHideText(props.hideText);\n        setTextPrefix(props.textPrefix);\n        setTextSuffix(props.textSuffix);\n    }, [ props.hideText, props.textPrefix, props.textSuffix ]);\n\n    // ---------------- APIs ----------------------------\n\n    const sendChangeEvent = (_pointers: IStatePointer[]) => {\n        if(!props.onChange || typeof props.onChange !== 'function') return;\n\n        const _values: (string|number)[] = [];\n        for(const pointer of _pointers) {\n            _values.push(getValueByPercent(\n                pointer.percent,\n                min,\n                max,\n                round,\n                props.data\n            ));\n        }\n\n        props.onChange(_values, _pointers);\n    };\n\n    // ---------------- EVENTS ----------------------------\n\n    const onValueChange = (evt: MouseEvent | ReactMouseEvent | TouchEvent | ReactTouchEvent) => {\n\n        if(disabled || !svgRef || !svgRef.current) return;\n\n        const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\n        const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\n\n        /**\n         * Once user drags the pointer, get updated pointer percent\n         * depending on the new mouse position.\n         */\n        let updatedPercent = getPointerPercentByMouse(\n            svgRef.current as SVGSVGElement,\n            [mouseX, mouseY],\n            svgCenter,\n            svgRadii,\n            startAngleDegrees,\n            endAngleDegrees,\n            min,\n            max,\n            props.data,\n            props.step\n        );\n\n        // SINGLE POINTER -----------------------------------------\n        if(pointers.length <= 1) {\n            setSelectedPointerId(pointers[0]?.id || null);\n            setPointers(currentPointers => {\n                const updatedPointers = updateSinglePointerValue(currentPointers, updatedPercent);\n                sendChangeEvent(updatedPointers);\n                return updatedPointers;\n            });\n            return;\n        }\n\n        /**\n         * There can be multiple pointers, part of them can be disabled.\n         * This code defines the current active pointer.\n         */\n        let _selectedPointerId = selectedPointerId;\n        setSelectedPointerId(currentSelectedPointerId => {\n            _selectedPointerId = getActivePointerId(\n                evt.target as HTMLElement,\n                pointers,\n                updatedPercent,\n                currentSelectedPointerId,\n                startAngleDegrees,\n                endAngleDegrees,\n                isClickOrDrag.current\n            );\n            return _selectedPointerId;\n        });\n\n        // MULTIPLE POINTERS ---------------------------------------\n        if(_selectedPointerId === null) return;\n\n        setPointers(currentPointers => {\n            const skipOverlapCheck = pointersOverlap || max === min;\n\n            if(!skipOverlapCheck) {\n                updatedPercent = handleOverlap(\n                    updatedPercent,\n                    currentPointers,\n                    _selectedPointerId,\n                    min,\n                    max\n                );\n            }\n\n            const updatedPointers = updateMultiplePointersValue(currentPointers, updatedPercent, _selectedPointerId);\n\n            sendChangeEvent(updatedPointers);\n\n            return updatedPointers;\n        });\n\n        // const updatedPointers = handlePointerZIndex(activePointerId, pointers);\n    }\n\n    const onMouseDown = (evt: MouseEvent | ReactMouseEvent) => {\n        if(disabled) return;\n\n        const $target = evt.target as SVGElement;\n        if(!$target) return;\n\n        const isAllowedTarget = $target === sliderRef.current || $target.getAttribute('data-type') === 'pointer';\n        if(!isAllowedTarget) return;\n\n        /* Prevent default blocks keydown events:\n        if (evt.preventDefault) {\n            evt.preventDefault();\n        }*/\n\n        onValueChange(evt);\n\n        window.addEventListener('mousemove', onValueChange);\n        window.addEventListener('mouseup', onMouseUp);\n        isClickOrDrag.current = 'drag';\n    };\n\n    const onMouseUp = (_evt: MouseEvent | ReactMouseEvent) => {\n        window.removeEventListener('mousemove', onValueChange);\n        window.removeEventListener('mouseup', onValueChange);\n        isClickOrDrag.current = 'click';\n    };\n\n    // ---------------- HELPERS ----------------------------\n\n    const goPrevNext = (isNext: boolean) => {\n        const pointerIndex = getPointerIndexById(pointers, selectedPointerId);\n        if(pointerIndex === -1) return;\n\n        const pointer = { ...pointers[pointerIndex] };\n        let percent = pointer.percent;\n        if(!isNumber(percent)) return;\n\n        let _stepPercent = stepPercent;\n        if(_stepPercent === undefined) {\n            _stepPercent = 1;\n        }\n\n        if(isNext) {\n            percent -= _stepPercent;\n        }\n        else{\n            percent += _stepPercent;\n        }\n\n        percent = mod(percent, 100);\n\n        // rerender -----\n        pointer.percent = percent;\n        const copy = [...pointers];\n        copy[pointerIndex] = pointer;\n        setPointers(copy);\n\n        sendChangeEvent(copy);\n    };\n\n    // ---------------- ARROWS & MOUSE ----------------------------\n\n    const arrowLeftUp = () => {\n        if(disabled || keyboardDisabled) return;\n\n        const pointerIndex = getPointerIndexById(pointers, selectedPointerId);\n        if(pointerIndex === -1 || pointers[pointerIndex].disabled) return;\n\n        goPrevNext(false);\n    };\n\n    const arrowRightDown = () => {\n        if(disabled || keyboardDisabled) return;\n\n        const pointerIndex = getPointerIndexById(pointers, selectedPointerId);\n        if(pointerIndex === -1 || pointers[pointerIndex].disabled) return;\n\n        goPrevNext(true);\n    };\n\n    const onKeyDown = (evt: KeyboardEvent) => {\n        switch (evt.key) {\n            case 'ArrowLeft': {\n                evt.preventDefault();\n                arrowLeftUp();\n                break;\n            }\n\n            case 'ArrowRight': {\n                evt.preventDefault();\n                arrowRightDown();\n                break;\n            }\n\n            case 'ArrowUp': {\n                evt.preventDefault();\n                arrowLeftUp();\n                break;\n            }\n\n            case 'ArrowDown': {\n                evt.preventDefault();\n                arrowRightDown();\n                break;\n            }\n        }\n    };\n\n    const onWheel = (evt: WheelEvent) => {\n        if(disabled || mousewheelDisabled) return;\n\n        const pointerIndex = getPointerIndexById(pointers, selectedPointerId);\n        if(pointerIndex === -1 || pointers[pointerIndex].disabled) return;\n\n        evt.stopPropagation();\n        // evt.preventDefault();\n\n        const scrollTop = evt.deltaY < 0;\n        goPrevNext(!scrollTop);\n    };\n\n    // ---------------- RENDERING -------------------------\n\n    return (\n        <svg\n            data-type=\"bg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            ref={ svgRef }\n            width={ svgWidth }\n            height={ svgHeight }\n            onMouseDown={ onMouseDown }\n            onMouseUp={ onMouseUp }\n            onTouchMove={ onValueChange }\n            onTouchStart={ onValueChange }\n            onKeyDown={ onKeyDown }\n            className={ disabled ? 'disabled' : undefined }\n            aria-disabled={ disabled ? true : undefined }\n            tabIndex={ 0 }\n            focusable={ true }\n            onWheel={ onWheel }\n            style={ DEFAULT_SVG_STYLE }>\n\n            {\n                (props.connectionGradient || props.pointerGradient) &&\n                <defs>\n                    { props.connectionGradient }\n                    { props.pointerGradient }\n                </defs>\n            }\n\n            <Panel\n                ref={ sliderRef }\n                ellipse={ ellipse }\n                strokeWidth={ panelStrokeWidth }\n                svgRadii={ svgRadii }\n                bgColor={ panelBgColor }\n            />\n\n            {\n                !disableTicks &&\n                sliderRef &&\n                sliderRef.current &&\n                (typeof sliderRef.current.getTotalLength === 'function') &&\n                <Ticks\n                    sliderRef={ sliderRef }\n\n                    ticksWidth={ ticksWidth }\n                    ticksHeight={ ticksHeight }\n                    longerTicksHeight={ longerTicksHeight }\n                    ticksColor={ panelBgColor }\n                    ticsCount={ ticsCount }\n                    ticksGroupSize={ props.ticksGroupSize }\n                    totalLength={ sliderRef?.current?.getTotalLength() || 0 }\n                    svgCenter={ svgCenter }\n                    ticksDistanceToPanel={ ticksDistanceToPanel }\n\n                    min={ min }\n                    max={ max }\n                    round={ round }\n                    data={ props.data }\n\n                    showTickValues={ props.showTickValues }\n                    longerTickValuesOnly={ props.longerTickValuesOnly }\n                    tickValuesColor={ props.tickValuesColor }\n                    tickValuesFontSize={ props.tickValuesFontSize }\n                    tickValuesFontFamily={ props.tickValuesFontFamily }\n                    tickValuesDistance={ props.tickValuesDistance }\n                />\n            }\n\n            <Connection\n                pointers={ pointers }\n                ellipse={ ellipse }\n                svgRadii={ svgRadii }\n                strokeWidth={ panelStrokeWidth }\n                connectionBgColor={ connectionBgColor }\n                startEndAngle={ startEndAngle }\n                svgCenter={ svgCenter }\n                connectionGradient={ props.connectionGradient }\n            />\n\n            {\n                pointers.map(pointer => {\n                    return (\n                        <Pointer\n                            key={ pointer.id }\n                            pointer={ pointer }\n                            id={ pointer.id }\n\n                            startEndAngle={ startEndAngle }\n                            svgRadii={ svgRadii }\n                            svgCenter={ svgCenter }\n\n                            pointerBgColor={ pointer.bgColor }\n                            pointerSVG={ props.pointerSVG || pointer.pointerSVG }\n                            pointerGradient={ props.pointerGradient }\n\n                            disabledPointerStyle={ disabledPointerStyle }\n                            min={ min }\n                            max={ max }\n                            round={ round }\n                            data={ props.data }\n                            ariaLabel={ pointer.ariaLabel }\n                        />\n                    )\n                })\n            }\n\n            {\n                !hideText &&\n                <Text \n                    svgCenter={ svgCenter } \n                    round={ round }\n                    min={ min }\n                    max={ max }\n                    pointers={ pointers }\n                    data={ props.data }\n                    textPrefix={ textPrefix }\n                    textSuffix={ textSuffix }\n                    textColor={ props.textColor }\n                    textFontSize={ props.textFontSize }\n                    textFontFamily={ props.textFontFamily }\n                />\n            }\n\n        </svg>\n    )\n};", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from '../types';\nimport { setDecimalPlaces } from './format';\n\nexport const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n\n/**\n * Convert polar coordinates to cartesian coordinates.\n */\nexport const polarToCartesian = (center: Vector2, radii: Vector2, angleInRad: number, decimalPlaces = Infinity) : Vector2 => {\n    const [cx, cy] = center;\n    const [rx, ry] = radii;\n\n    return [\n        setDecimalPlaces(cx + (rx * Math.cos(angleInRad)), decimalPlaces),\n        setDecimalPlaces(cy + (ry * Math.sin(angleInRad)), decimalPlaces),\n    ];\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\nimport { mod } from './other';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleInEllipse = (v2: Vector2, radii: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1]/radii[1], v2[0]/radii[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};\n\n/**\n * Shortest distance (angular) between two angles.\n */\nexport const getAnglesSub = (angleDegrees1: number, angleDegrees2: number, decimalPlaces = Infinity) : number => {\n    const angleDistance = Math.abs(mod(angleDegrees1, 360) - mod(angleDegrees2, 360));\n    return setDecimalPlaces(angleDistance <= 180 ? angleDistance : 360 - angleDistance, decimalPlaces);\n};\n\nexport const isAngleBetween = (angleDegrees: number, startAngleDegrees: number, endAngleDegrees: number) : boolean => {\n    const distance = getAnglesSub(startAngleDegrees, endAngleDegrees);\n    const distance1 = getAnglesSub(startAngleDegrees, angleDegrees);\n    const distance2 = getAnglesSub(endAngleDegrees, angleDegrees);\n    const totalDistance = distance1 + distance2;\n\n    // Use a small threshold for floating point errors\n    return Math.abs(totalDistance - distance) <= 0.001;\n}", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};\n\n// --------------- NORMAL --------------------------\n\nexport const v2GetNormal = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity): Vector2 => {\n    const sub = v2Sub(vector2, vector1);\n    return [\n        -setDecimalPlaces(sub[1], decimalPlaces),\n        setDecimalPlaces(sub[0], decimalPlaces)\n    ];\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const scale = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, scale);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\nimport { v2Sub } from '../linear-algebra/vector';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};\n\n/**\n * Calculate the equation of a line given two points in a 2D space.\n * y = ax + b\n * y - y1 = m(x - x1)\n * m = (y2 - y1) / (x2 - x1)\n */\nexport const getLinearEquationBy2Points = (point1: Vector2, point2: Vector2) : {\n    slope: number|undefined,\n    yIntercept: number|undefined,\n    xIntercept: number|undefined,\n    formula: string,\n} => {\n    const [deltaX, deltaY] = v2Sub(point2, point1);\n    const [x, y] = point1;\n\n    if(deltaX === 0) {\n        return {\n            slope: undefined,\n            xIntercept: x,\n            yIntercept: undefined,\n            formula: `x = ${ x }`,\n        };\n    }\n\n    const m = deltaY / deltaX;\n    const b = y - m * x;\n    let formula = '';\n\n    if(m === 0) {\n        formula = `y = ${ b }`;\n    }\n    else{\n        formula = `y = ${ m === 1 ? '' : m }x`;\n\n        if(b !== 0) {\n            formula += ` ${ b < 0 ? '-' : '+' } ${ Math.abs(b) }`;\n        }\n    }\n\n    return {\n        slope: m,\n        xIntercept: undefined,\n        yIntercept: b,\n        formula,\n    };\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Ellipse Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const ellipseMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radii: Vector2\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return ellipseMovement(center, angle, radii[0], radii[1]);\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { setDecimalPlaces } from './format';\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { ICircle, IPolygon, IRect, Matrix2, Vector2 } from '../types';\nimport { mod } from './other';\nimport { v2GetNormal, v2DotProduct } from './linear-algebra/vector';\n\n/**\n * Rectangles collision detection.\n * Rectangles should not be rotated.\n * The algorithm works by ensuring there is no gap between any of the 4 sides of the rectangles.\n * Any gap means a collision does not exist.\n * Returns true if collision is detected.\n */\nexport const rectCollide = (rect1: IRect, rect2: IRect) : boolean => {\n    return rect1.x <= rect2.x + rect2.w &&\n            rect1.x + rect1.w >= rect2.x &&\n            rect1.y <= rect2.y + rect2.h &&\n            rect1.h + rect1.y >= rect2.y;\n};\n\n/**\n * Circles collision detection.\n * This algorithm works by taking the center points of the two circles\n * and ensuring the distance between the center points\n * are less than the two radii added together.\n * Returns true if collision is detected.\n */\nexport const circleCollide = (circle1: ICircle, circle2: ICircle) => {\n    const dx = Math.abs(circle1.cx - circle2.cx);\n    const dy = Math.abs(circle1.cy - circle2.cy);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= circle1.r + circle2.r;\n};\n\n//-------------------- Separating Axis Theorem (SAT) Collision detection -------------------------\n\nconst getEdges = (poly: IPolygon) : Matrix2[] => {\n    const edges: Matrix2[] = [];\n\n    for(let i= 0; i<poly.length; i++){\n        const nextIndex = mod(i + 1, poly.length);\n        const edge: Matrix2 = [poly[i], poly[nextIndex]];\n        edges.push(edge);\n    }\n\n    return edges;\n};\n\nexport const convexPolygonsCollide = (poly1: IPolygon, poly2: IPolygon): boolean => {\n    const edges: Matrix2[] = [];\n\n    // collect polygon edges, and combine then into a single array\n    edges.push(...getEdges(poly1));\n    edges.push(...getEdges(poly2));\n\n    // for each edge, find the normal vector and project both polygons onto it\n    for (const edge of edges) {\n        const normal = v2GetNormal(edge[0], edge[1]);\n        const p1Proj = projectPolygon(poly1, normal);\n        const p2Proj = projectPolygon(poly2, normal);\n\n        // Check if the projections overlap\n        const isOverlap = p1Proj.max >= p2Proj.min && p2Proj.max >= p1Proj.min;\n\n        // Check if the projections overlap; if not, the polygons do not collide\n        if (!isOverlap) return false;\n    }\n\n    // If all tests pass, the polygons overlap and collide\n    return true;\n};\n\n/**\n * Project every polygon point onto the normal.\n * Then find min and max.\n */\nconst projectPolygon = (polygon: IPolygon, normal: Vector2): { min: number, max: number } => {\n    let min = Infinity;\n    let max = -Infinity;\n\n    // Project each vertex of the polygon onto the axis\n    for (const vertex of polygon) {\n        const projection = v2DotProduct(vertex, normal);\n        min = Math.min(min, projection);\n        max = Math.max(max, projection);\n    }\n\n    return { min, max };\n};", "export interface IAnimationProps {\n    duration?: number;\n    callback: (result: IAnimationResult) => void;\n    restartOnResize?: boolean;\n    resizeCallback?: (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => void;\n}\n\nexport interface IAnimationResult {\n    start: () => void;\n    stop: () => void;\n    pause: () => void;\n    resume: () => void;\n    restart: () => void;\n    isAnimating: () => boolean;\n    getStartTime: () => number|undefined;\n    getElapsedTime: () => number|undefined;\n    getPercent: () => number|undefined;\n    getResizeObserver: () => ResizeObserver|undefined;\n}\n\nexport const animate = (props: IAnimationProps) : IAnimationResult => {\n\n    const _duration = props.duration !== undefined ? props.duration : Infinity;\n\n    let startTime: number|undefined = undefined; // in milliseconds\n    let animationId: number|undefined = undefined;\n\n    // the time elapsed since the start of the animation (in milliseconds)\n    let elapsed: number|undefined = undefined;\n    let previousTimeStamp: number|undefined = undefined;\n\n    let animating = false;\n    let observer: ResizeObserver|undefined = undefined;\n\n    // -------------------- COMMANDS ---------------------\n\n    const stop = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = false;\n\n        /*if(observer !== undefined){\n            observer.disconnect();\n            observer = undefined;\n        }*/\n\n        if(animationId === undefined) return;\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const restart = () => {\n        stop();\n        start();\n    };\n\n    const pause = () => {\n        animating = false;\n    };\n\n    const resume = () => {\n        animating = true;\n    };\n\n    /**\n     * Animation Step.\n     * @param {number} timeStamp in milliseconds\n     */\n    const step = (timeStamp: DOMHighResTimeStamp) => {\n\n        if (startTime === undefined) {\n            startTime = timeStamp;\n        }\n\n        // the time elapsed since the start of the animation (in milliseconds)\n        elapsed = timeStamp - startTime;\n\n        if (animating && previousTimeStamp !== timeStamp && typeof props.callback === 'function') {\n\n            // do the rendering .............\n            props.callback(getResult());\n        }\n\n        if(elapsed <= _duration){\n            previousTimeStamp = timeStamp;\n            animationId = window.requestAnimationFrame(step);\n        }\n        else{\n            stop();\n        }\n    };\n\n    const observerHandler = (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => {\n        restart();\n\n        if(typeof props.resizeCallback === 'function'){\n            props.resizeCallback(_entries, _observer);\n        }\n    };\n\n    const start = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = true;\n\n        if(props.restartOnResize && window.ResizeObserver && observer === undefined){\n            observer = new ResizeObserver(observerHandler);\n            observer.observe(document.body, { box: 'border-box' });\n        }\n        else{\n            animationId = window.requestAnimationFrame(step);\n        }\n    };\n\n    // --------------- GET INFO ----------------------\n\n    /**\n     * the time elapsed since the start of the animation (in milliseconds)\n     */\n    const getElapsedTime = () : number|undefined => {\n        return elapsed;\n    };\n\n    const isAnimating = () => {\n        return animating;\n    };\n\n    const getStartTime = () => {\n        return startTime;\n    };\n\n    const getPercent = () => {\n        if(_duration === Infinity || elapsed === undefined) return undefined;\n        return elapsed * 100 / _duration;\n    };\n\n    const getResizeObserver = () => {\n      return observer;\n    };\n\n    const getResult = () : IAnimationResult => {\n        return {\n\n            // commands --------------\n            start,\n            stop,\n            pause,\n            resume,\n            restart,\n\n            // information -------\n            isAnimating,\n            getElapsedTime,\n            getStartTime,\n            getPercent,\n            getResizeObserver,\n        };\n    };\n\n    return getResult();\n};\n", "import { isNumber } from 'mz-math';\n\nexport const getNumber = (value: number|string|undefined|null, defaultValue: number) : number => {\n    return isNumber(value) ? Number(value) : defaultValue;\n};\n\nexport const getString = (value: string|undefined|null, defaultValue: string) : string => {\n    return value === undefined || value === null ? defaultValue : value;\n};\n\nexport const getBoolean = (value: boolean|undefined|null, defaultValue: boolean) : boolean => {\n    return value === undefined || value === null ? defaultValue : value;\n};", "export const DEFAULT_SVG_RX = 150;\nexport const DEFAULT_SVG_RY = 150;\n\nexport const DEFAULT_POINTER_RX = 10;\nexport const DEFAULT_POINTER_RY = 10;\n\nexport const DEFAULT_STROKE_WIDTH = 5;\n\nexport const DEFAULT_BG_COLOR = '#efefef';\nexport const DEFAULT_CONNECTION_BG_COLOR = '#5daed2';\nexport const DEFAULT_POINTER_BG_COLOR = '#333';\n\nexport const DEFAULT_START_ANGLE = 0;\nexport const DEFAULT_END_ANGLE = 360 - 0.001;\n\nexport const MIN_VALUE_DEFAULT = 0;\nexport const MAX_VALUE_DEFAULT = 100;\n\nexport const POINTER_OVERLAP_DEFAULT = false;\n\nexport const DISABLED_POINTER_STYLE = {\n    filter: 'opacity(0.7) grayscale(100%)',\n};\n\nexport const DEFAULT_SVG_STYLE = {\n    outline: 'none',\n};\n\nexport const DEFAULT_POINTER_STYLE = {\n    outline: 'none',\n};\n\nexport const ROUND_DEFAULT = 2;\n\n// ticks ------------------------------\nexport const TICKS_WIDTH_DEFAULT = 3;\nexport const TICKS_HEIGHT_DEFAULT = 20;\n\n// text ---------------------\nexport const DEFAULT_TEXT_COLOR = '#000';\nexport const DEFAULT_TEXT_FONT_SIZE = 16;\n", "/**\n * Defines if the current angle is in the provided range [startAngle, endAngle].\n * It should work with the SVG path elliptic arc segment.\n */\nimport { getNumber } from './common';\nimport { mod, Vector2 } from 'mz-math';\nimport { DEFAULT_END_ANGLE, DEFAULT_START_ANGLE } from './defaults';\n\nexport const isAngleInArc = (startAngleDegrees: number, endAngleDegrees: number, currentDegrees: number) : boolean => {\n    return currentDegrees >= startAngleDegrees && currentDegrees <= endAngleDegrees ||\n        (currentDegrees + 360) >= startAngleDegrees && (currentDegrees + 360) <= endAngleDegrees;\n};\n\n/**\n * Normalize start and end angles the way, that\n * it will be easy to draw an ellipse / circle path\n * with SVG path data (elliptic arc).\n */\nexport const normalizeAngles = (startAngleDegrees?: number, endAngleDegrees?: number) : Vector2 => {\n    let _startAngleDegrees = getNumber(startAngleDegrees, DEFAULT_START_ANGLE);\n    let _endAngleDegrees = getNumber(endAngleDegrees, DEFAULT_END_ANGLE);\n\n    _startAngleDegrees = mod(_startAngleDegrees, 360);\n    _endAngleDegrees = mod(_endAngleDegrees, 360);\n\n    if(_startAngleDegrees < 0){\n        _startAngleDegrees += 360;\n    }\n\n    if(_endAngleDegrees < 0){\n        _endAngleDegrees += 360;\n    }\n\n    if(_endAngleDegrees < _startAngleDegrees){\n        _endAngleDegrees += 360;\n    }\n\n    // If start angle equals to the end angle, svg arc will draw a dot instead of circle / ellipse path.\n    // To avoid this behaviour, subtract small amount of the end angle (0.001).\n    if(_startAngleDegrees === _endAngleDegrees){\n        _endAngleDegrees += 359.999; // 360 - 0.001;\n    }\n\n    return [\n        _startAngleDegrees,\n        _endAngleDegrees\n    ];\n};", "import {\n    convertRange,\n    degreesToRadians,\n    ellipseMovement, getAnglesSub,\n    mod,\n    newId,\n    radiansToDegrees, setDecimalPlaces,\n    v2Sub,\n    Vector2\n} from 'mz-math';\nimport { IStatePointer, IUserSettingsPointer, TData } from '../interfaces';\nimport { getNumber } from './common';\nimport {\n    DEFAULT_POINTER_BG_COLOR,\n    DEFAULT_POINTER_RX,\n    DEFAULT_POINTER_RY,\n    MAX_VALUE_DEFAULT,\n    MIN_VALUE_DEFAULT,\n} from './defaults';\nimport { isAngleInArc } from './angles-provider';\nimport { ReactNode } from 'react';\n\n/**\n * Max pointer [rx, ry] is used to define svg size, svg center position,\n * and also ellipse/circle properties.\n */\nexport const getMaxPointer = (pointers: IStatePointer[]) : Vector2 => {\n    if(pointers.length <= 0) return [0, 0];\n\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const pointer of pointers){\n        const [rx, ry] = pointer.pointerRadii;\n\n        maxX = Math.max(maxX, Math.max(0, rx));\n        maxY = Math.max(maxY, Math.max(0, ry));\n    }\n\n    return [\n        maxX,\n        maxY,\n    ];\n};\n\n/**\n * On component init, min and max should be initialized together,\n * because their validations depend on each other.\n * In case when the data is provided, min & max represent index in the data array.\n */\nexport const getMinMax = (\n    min: number | string | undefined | null,\n    max: number | string | undefined | null,\n    data?: TData\n): Vector2 => {\n    if(!!data && data.length > 0){\n\n        const minIndex = data.findIndex(item => item === min);\n        const maxIndex = data.findIndex(item => item === max);\n\n        const _min = minIndex === -1 ? 0 : minIndex;\n        const _max = maxIndex === -1 ? data.length : maxIndex;\n        return [_min, _max];\n    }\n\n    const _min = getNumber(min, MIN_VALUE_DEFAULT);\n    let _max = getNumber(max, MAX_VALUE_DEFAULT);\n\n    if(_min > _max){\n        _max = _min + MAX_VALUE_DEFAULT;\n    }\n\n    return [_min, _max];\n};\n\n/**\n * This function will validate the pointer value provided by the user.\n * If data is provided, it will return and index of the data array.\n * Otherwise, it will return the actual value.\n * It will also will check if the value is in the [min, max] range.\n */\nexport const getValue = (\n    value: string | number,\n    min: number,\n    max: number,\n    data?: TData\n) : number => {\n\n    if(data && data.length > 0){\n        const index = data.findIndex(item => item === value);\n\n        // the provided value doesn't exist in the data array --->\n        // just return the first index.\n        if(index === -1) return 0;\n\n        // Index of data array represents its value.\n        return index;\n    }\n\n    let _value = getNumber(value, min);\n\n    if(_value < min){\n        _value = min;\n    }\n\n    if(_value > max){\n        _value = max;\n    }\n\n    return _value;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const aaa = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n\n/**\n * For the given pointer percent, return its value\n * that can be printed somewhere or sent back to user\n * via API or events.\n */\nexport const getValueByPercent = (\n    percent: number,\n    min: number,\n    max: number,\n    round: number,\n    data?: TData,\n) : string|number => {\n\n    // scale a range [min, max] to [a, b]\n    const value = (min === max) ? 0 : convertRange(percent, 0, 100, min, max);\n\n    if(data && data.length > 0) {\n        return data[Math.round(value)];\n    }\n\n    return setDecimalPlaces(value, round);\n};\n\n/**\n * Round up to the next multiple of X,\n * where X is the step provided by the user.\n */\nexport const roundToStep = (num: number, step: number) => {\n    return step === 0 ? 0 : Math.round(num / step) * step;\n};\n\n/**\n * User step is defined in absolute values;\n * this function return it as %\n */\nexport const getStepPercent = (min: number, max: number, data: TData, step?: number) : number|undefined => {\n    if(step === undefined && !!data) {\n        step = 1;\n    }\n\n    if(step === undefined) return undefined;\n\n    /*\n     min ......... max (step = 1)\n     0 ........... 100 (step = ?)\n\n     (max - min) ....... step (=1)\n     100 ............... ?\n\n     ? = 100 * step / (max - min)\n     */\n\n    const diff = max - min;\n    if(diff === 0) return 0;\n\n    return step * 100 / diff;\n};\n\n/**\n * Convert user provided pointers settings to the actual state pointers' definition.\n */\nexport const getInitialPointers = (\n    userSettingsPointers: IUserSettingsPointer[],\n    min: number,\n    max: number,\n    data?: TData,\n    pointerBgColor?: string,\n    pointerSVG?: ReactNode,\n) : IStatePointer[] => {\n\n    const pointers: IStatePointer[] = [];\n    const _userSettingsPointers = userSettingsPointers || [];\n\n    for(let i=0; i<_userSettingsPointers.length; i++){\n        const userSettingsPointer = _userSettingsPointers[i];\n        if(userSettingsPointer.rx <= 0 || userSettingsPointer.ry <= 0) continue;\n\n        const value = getValue(userSettingsPointer.value, min, max, data);\n\n        // scale a range [min, max] to [a, b]\n        const percent = (min === max) ? 0 : convertRange(min, max, 0, 100, value);\n\n        const pointer: IStatePointer = {\n            pointerRadii: [\n                getNumber(userSettingsPointer.rx, DEFAULT_POINTER_RX),\n                getNumber(userSettingsPointer.ry, DEFAULT_POINTER_RY),\n            ],\n            percent,\n            id: newId(),\n            index: 0,\n            bgColor: userSettingsPointer.bgColor || pointerBgColor || DEFAULT_POINTER_BG_COLOR,\n            pointerSVG: pointerSVG || userSettingsPointer.pointerSVG,\n            disabled: userSettingsPointer.disabled === true,\n            keyboardDisabled: false,\n            mousewheelDisabled: false,\n            ariaLabel: userSettingsPointer.ariaLabel,\n        };\n\n        pointers.push(pointer);\n    }\n\n    if(pointers.length > 1) {\n\n        // It is possible that the user defines pointers in unsorted order.\n        pointers.sort((pointer1, pointer2) => {\n            return pointer1.percent - pointer2.percent;\n        });\n\n        // The index is used in multiple pointers overlap feature.\n        for(let i=0; i < pointers.length; i++){\n            pointers[i].index = i;\n        }\n    }\n\n    if(!pointers || pointers.length <= 0) {\n        return [{\n            pointerRadii: [ DEFAULT_POINTER_RX, DEFAULT_POINTER_RY ],\n            percent: 0,\n            id: newId(),\n            index: 0,\n            bgColor: DEFAULT_POINTER_BG_COLOR,\n            disabled: false,\n            keyboardDisabled: false,\n            mousewheelDisabled: false,\n        }];\n    }\n\n    return pointers;\n};\n\n\n/**\n * User provides pointer values that are transformed to percents.\n * These percents should be transformed to the positions on the SVG arc.\n */\nexport const getPointerPositionByPercent = (\n    percent: number,\n    startAngleDegrees: number,\n    endAngleDegrees: number,\n    svgRadii: Vector2,\n    center: Vector2,\n) : {\n    position: Vector2,\n    angleDegrees: number,\n} => {\n    const angleDiff = Math.abs(endAngleDegrees - startAngleDegrees);\n    const percentAngle = percent * angleDiff / 100;\n    const angleDegrees = mod(startAngleDegrees + percentAngle, 360);\n\n    let angleRad = degreesToRadians(angleDegrees);\n\n    // Convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI].\n    angleRad = convertRange(angleRad, 0, Math.PI*2, 0, Math.PI);\n\n    return {\n        position: ellipseMovement(center, angleRad, svgRadii[0], svgRadii[1]),\n        angleDegrees,\n    };\n};\n\nexport const getMinMaxPointer = (pointers: IStatePointer[]) : [IStatePointer, IStatePointer] | null => {\n    if(!pointers || pointers.length < 2) return null;\n\n    let minPercent = Infinity;\n    let minPointer: IStatePointer|null = null;\n\n    let maxPercent = -Infinity;\n    let maxPointer: IStatePointer|null = null;\n\n    for(let i=0; i<pointers.length; i++){\n        const pointer = pointers[i];\n\n        if(pointer.percent < minPercent){\n            minPercent = pointer.percent;\n            minPointer = pointer;\n        }\n\n        if(pointer.percent > maxPercent){\n            maxPercent = pointer.percent;\n            maxPointer = pointer;\n        }\n    }\n\n    if(minPointer === null || maxPointer === null) return null;\n\n    return [minPointer, maxPointer];\n};\n\n/**\n * Once user drags the pointer, get updated pointer percent\n * depending on the new mouse position.\n */\nexport const getPointerPercentByMouse = (\n    $svg: SVGSVGElement,\n    absoluteMouse: Vector2,\n    center: Vector2,\n    svgRadii: Vector2,\n    startAngleDegrees: number,\n    endAngleDegrees: number,\n    min: number,\n    max: number,\n    data: TData|undefined,\n    step: number|undefined\n) : number => {\n    const [clientX, clientY] = absoluteMouse;\n\n    const { left, top } = $svg.getBoundingClientRect();\n\n    const relativeMouse: Vector2 = [\n        clientX - left,\n        clientY - top,\n    ];\n\n    const vector = v2Sub(relativeMouse, center);\n\n    const [rx, ry] = svgRadii;\n\n    let angleRad = Math.atan2(vector[1] / ry, vector[0] / rx);\n    if(angleRad < 0){\n        angleRad += 2 * Math.PI;\n    }\n\n    const degrees = radiansToDegrees(angleRad);\n\n    const isInArc = isAngleInArc(startAngleDegrees, endAngleDegrees, degrees);\n    if(!isInArc){\n        const angleSub1 = getAnglesSub(degrees, startAngleDegrees);\n        const angleSub2 = getAnglesSub(degrees, endAngleDegrees);\n        return angleSub1 <= angleSub2 ? min : max;\n    }\n\n    const angleDiff = Math.abs(endAngleDegrees - startAngleDegrees);\n\n    const updatedPercent = degrees * 100 / angleDiff;\n\n    const stepPercent = getStepPercent(min, max, data, step);\n    const result = stepPercent === undefined ? updatedPercent : roundToStep(updatedPercent, stepPercent);\n    return result === 100 ? 0 : result;\n};\n\nexport const getPointerIndexById = (pointers: IStatePointer[], id: string) => {\n    if(!pointers || !id) return -1;\n    return pointers.findIndex(pointer => pointer.id === id);\n};\n\nconst isPanelClicked = ($target: HTMLElement) => {\n    return $target.getAttribute('data-type') === 'panel';\n};\n\nconst isConnectionClicked = ($target: HTMLElement) => {\n    return $target.getAttribute('data-type') === 'connection';\n};\n\nconst isPointerClicked = ($target: HTMLElement, id: string) => {\n    return $target.getAttribute('data-type') === 'pointer' &&\n        $target.getAttribute('data-id') === id ||\n        $target.querySelector(`[data-type=\"pointer\"][data-index=\"${ id }\"]`) !== null;\n};\n\n/**\n * There can be multiple pointers, part of them can be disabled.\n * This function returns the current active pointer.\n */\nexport const getActivePointerId = (\n    $target: HTMLElement,\n    pointers: IStatePointer[],\n    currentPercent: number,\n    selectedPointerId: string|null,\n    startAngleDegrees: number,\n    endAngleDegrees: number,\n    isClickOrDrag: 'click' | 'drag'\n) : string|null => {\n\n    if(pointers.length <= 0) return null;\n\n    // if only 1 pointer exists --> return it\n    if(pointers.length === 1){\n        return pointers[0].id;\n    }\n\n    if(isClickOrDrag === 'drag') return selectedPointerId;\n\n    if(isPanelClicked($target) || isConnectionClicked($target)){\n        const angleDiff = Math.abs(endAngleDegrees - startAngleDegrees);\n        const currentValueAngle = currentPercent * angleDiff / 100;\n\n        let minAngle = Infinity;\n        let minDistancePointerId = null;\n\n        // The closest pointer should jump.\n        for(let i=0; i<pointers.length; i++){\n            const pointer = pointers[i];\n            const pointerAngle = pointer.percent * angleDiff / 100;\n            const angleSub = getAnglesSub(pointerAngle, currentValueAngle);\n\n            if(angleSub < minAngle){\n                minAngle = angleSub;\n                minDistancePointerId = pointer.id;\n            }\n        }\n\n        // console.log(`Clicked on panel. The closest pointer id is ${ minDistancePointerId }`)\n        return minDistancePointerId;\n    }\n\n    // If clicked directly on pointer ----\n    for(let i=0; i<pointers.length; i++) {\n        const pointer = pointers[i];\n        if(isPointerClicked($target, pointer.id)){\n            // console.log(`Pointer is clicked on ${ pointer.id }`)\n            return pointer.id;\n        }\n    }\n\n    //console.log(`Returned selectedPointerId ${ selectedPointerId }`);\n    return selectedPointerId;\n};\n\n/**\n * When pointer is selected, it should move to be above all other pointers,\n * as SVG doesn't support normal z-index.\n */\nexport const handlePointerZIndex = (activePointerId: string|null, pointers: IStatePointer[]) : IStatePointer[] => {\n    const _pointers = [...pointers];\n\n    if(activePointerId === null || _pointers.length <= 1){\n        return _pointers;\n    }\n\n    const foundIndex = _pointers.findIndex(pointer => pointer.id === activePointerId);\n    if(foundIndex === -1){\n        return _pointers;\n    }\n\n    /**\n     * SVG doesn't have normal z-index.\n     * To place active pointer on top of other pointers,\n     * we need to reorder them.\n     */\n    const pointer = _pointers[foundIndex];\n    _pointers.splice(foundIndex, 1);\n    _pointers.push(pointer);\n\n    return _pointers;\n};\n\n/**\n * In case of multiple pointers, get the pointer, that its value is \"next\".\n */\nexport const getNextPrevPointer = (pointers: IStatePointer[], currentPointerId: string) : [IStatePointer, IStatePointer, IStatePointer]|null => {\n    const currentPointer = pointers.find(pointer => pointer.id === currentPointerId);\n    if(!currentPointer) return null;\n\n    const nextIndex = mod(currentPointer.index + 1, pointers.length);\n    const nextPointer = pointers.find(pointer => pointer.index === nextIndex);\n    if(!nextPointer) return null;\n\n    const prevIndex = mod(currentPointer.index - 1, pointers.length);\n    const prevPointer = pointers.find(pointer => pointer.index === prevIndex);\n\n    return [currentPointer, nextPointer, prevPointer];\n};\n\n/**\n * In case of single pointer, update its value.\n */\nexport const updateSinglePointerValue = (\n    pointers: IStatePointer[],\n    updatedPercent: number\n): IStatePointer[] => {\n    if(pointers[0].disabled) return pointers;\n\n    const copy = [...pointers];\n    const pointer = copy[0];\n    pointer.percent = updatedPercent;\n    copy[0] = pointer;\n\n    return copy;\n};\n\n/**\n * In case of multiple pointers, find the active pointer,\n * and update its value.\n */\nexport const updateMultiplePointersValue = (\n    pointers: IStatePointer[],\n    updatedPercent: number,\n    selectedPointerId: string\n) => {\n    if(!selectedPointerId) return pointers;\n\n    const pointerIndex = pointers.findIndex(p => p.id === selectedPointerId);\n    if(pointerIndex === -1) return pointers;\n\n    if(pointers[pointerIndex].disabled) return pointers;\n\n    const copy = [...pointers];\n    const pointer = {...copy[pointerIndex]};\n    pointer.percent = updatedPercent;\n    copy[pointerIndex] = pointer;\n\n    return copy;\n};\n\nexport const handleOverlap = (\n    updatedPercent: number,\n    pointers: IStatePointer[],\n    activePointerId: string,\n    min: number,\n    max: number,\n) => {\n    // Pointers non-overlap cases: -----------------------------------\n    // We need immediate access to the latest pointers version.\n    const [currentPointer, nextPointer, prevPointer] = getNextPrevPointer(pointers, activePointerId); // activePointerId selectedPointerId\n    const diff = (updatedPercent - currentPointer.percent);\n\n    const range = Math.abs(max - min) / 2;\n\n    if(diff !== 0 && currentPointer.percent !== 0 && updatedPercent !== 0){\n        const isClockwise = Math.abs(diff) > range ? diff < 0 : diff >= 0;\n\n        if(isClockwise && nextPointer.percent >= currentPointer.percent) {\n            updatedPercent = Math.min(updatedPercent, nextPointer.percent);\n        }\n\n        if(!isClockwise && prevPointer.percent <= currentPointer.percent) {\n            updatedPercent = Math.max(updatedPercent, prevPointer.percent);\n        }\n    }\n\n    return updatedPercent;\n};\n", "import { degreesToRadians, polarToCartesian, setDecimalPlaces, Vector2 } from 'mz-math';\nimport { IEllipse } from '../interfaces';\n\n/**\n * Calculate SVG size depending on ellipse radii and max pointer size.\n */\nexport const getSVGSize = (svgRadii: Vector2, maxPointerRadii: Vector2, strokeWidth: number) : Vector2 => {\n\n    const [ rxSvg, rySvg ] = svgRadii;\n    const [ rxPointer, ryPointer ] = maxPointerRadii;\n\n    const diffX = Math.max(0, rxPointer * 2 - strokeWidth);\n    const diffY = Math.max(0, ryPointer * 2 - strokeWidth);\n\n    const svgWidth = rxSvg * 2 + strokeWidth + diffX;\n    const svgHeight = rySvg * 2 + strokeWidth + diffY;\n\n    return [\n        svgWidth,\n        svgHeight,\n    ];\n};\n\n/**\n * Calculate the center point of the SVG.\n */\nexport const getSVGCenter = (svgRadii: Vector2, maxPointerRadii: Vector2, strokeWidth: number) : Vector2 => {\n\n    const [ svgWidth, svgHeight ] = getSVGSize(svgRadii, maxPointerRadii, strokeWidth);\n\n    return [\n        setDecimalPlaces(svgWidth / 2, 2),\n        setDecimalPlaces(svgHeight / 2, 2)\n    ];\n};\n\n/**\n * Get start & end points of SVG ellipse/circle segment.\n * Also define the 'large-arc-flag' property of svg path data elliptical arc.\n * Elliptical arc: rx ry angle large-arc-flag sweep-flag x y.\n */\nexport const getEllipseSegment = (\n    startAngleDegrees: number,\n    endAngleDegrees: number,\n    svgRadii: Vector2,\n    pointerRadii: Vector2,\n    strokeWidth: number\n) : IEllipse => {\n\n    let _endAngleDegrees = endAngleDegrees;\n    const largeArcFlag = _endAngleDegrees - startAngleDegrees <= 180 ? 0 : 1;\n\n    if(startAngleDegrees > _endAngleDegrees){\n        _endAngleDegrees += 360;\n    }\n\n    const center = getSVGCenter(svgRadii, pointerRadii, strokeWidth);\n\n    const sliderStartPoint = polarToCartesian(center, svgRadii, degreesToRadians(startAngleDegrees));\n    const sliderEndPoint = polarToCartesian(center, svgRadii, degreesToRadians(_endAngleDegrees));\n\n    return {\n        start: sliderStartPoint,\n        end: sliderEndPoint,\n        largeArcFlag,\n    }\n};", "import { forwardRef, LegacyRef } from 'react';\nimport { IPanel } from '../interfaces';\n\nconst Panel = (props: IPanel, sliderRef: LegacyRef<SVGPathElement|null>) => {\n\n    const  { ellipse, strokeWidth, svgRadii, bgColor } = props;\n    const { start, end, largeArcFlag } = ellipse;\n\n    return (\n        <path\n            data-type=\"panel\"\n            ref={ sliderRef }\n            d={ `M ${ start[0] } ${ start[1] } A ${ svgRadii[0] } ${ svgRadii[1] } 0 ${ largeArcFlag } 1 ${ end[0] } ${ end[1] }` }\n            stroke={ bgColor }\n            strokeWidth={ strokeWidth }\n            fill=\"none\"\n            shapeRendering=\"geometricPrecision\"\n            strokeLinecap=\"round\"\n            cursor=\"pointer\"\n        />\n    )\n};\n\nexport default forwardRef(Panel);", "import { IConnection, IStatePointer } from '../interfaces';\nimport { useEffect, useState } from 'react';\nimport { getMinMaxPointer, getPointerPositionByPercent } from '../domain/slider-provider';\nimport { Vector2 } from 'mz-math';\n\nconst Connection = (props: IConnection) => {\n\n    const  {\n        pointers, ellipse, strokeWidth, svgCenter,\n        svgRadii, connectionBgColor,\n        connectionGradient, startEndAngle,\n    } = props;\n    const { start } = ellipse;\n\n    const [ startAngleDegrees, endAngleDegrees ] = startEndAngle;\n\n    const [ connectionStartPoint, setConnectionStartPoint ] = useState<Vector2|null>(null);\n    const [ connectionEndPoint, setConnectionEndPoint ] = useState<Vector2|null>(null);\n    const [ connectionLargeArcFlag, setConnectionLargeArcFlag] = useState(0);\n\n    useEffect(() => {\n        if(!pointers || pointers.length <= 0) return;\n\n        // Slider has only 1 pointer.\n        if(pointers.length <= 1){\n            const pointer = pointers[0];\n\n            const { position: center, angleDegrees } = getPointerPositionByPercent(\n                pointer.percent,\n                startAngleDegrees,\n                endAngleDegrees,\n                svgRadii,\n                svgCenter\n            );\n\n            setConnectionStartPoint(start);\n            setConnectionEndPoint(center);\n            setConnectionLargeArcFlag(Math.abs(angleDegrees - startAngleDegrees) <= 180 ? 0 : 1);\n            return;\n        }\n\n        // Slider has multiple pointers.\n        const minMax = getMinMaxPointer(pointers);\n        if(minMax === null) return;\n\n        const minPointer: IStatePointer = minMax[0];\n        const maxPointer: IStatePointer = minMax[1];\n\n        const { position: centerStart, angleDegrees: angleDegreesStart } = getPointerPositionByPercent(\n            minPointer.percent,\n            startAngleDegrees,\n            endAngleDegrees,\n            svgRadii,\n            svgCenter\n        );\n\n        const { position: centerEnd, angleDegrees: angleDegreesEnd } = getPointerPositionByPercent(\n            maxPointer.percent,\n            startAngleDegrees,\n            endAngleDegrees,\n            svgRadii,\n            svgCenter\n        );\n\n        setConnectionStartPoint(centerStart);\n        setConnectionEndPoint(centerEnd);\n        setConnectionLargeArcFlag(Math.abs(angleDegreesEnd - angleDegreesStart) <= 180 ? 0 : 1);\n    }, [\n        endAngleDegrees,\n        pointers,\n        start,\n        startAngleDegrees,\n        svgCenter,\n        svgRadii,\n    ]);\n\n    return (\n        <>\n            {\n                connectionStartPoint !== null && connectionEndPoint !== null &&\n                <path\n                    data-type=\"connection\"\n                    d={ `M ${ connectionStartPoint[0] } ${ connectionStartPoint[1] } A ${ svgRadii[0] } ${ svgRadii[1] } 0 ${ connectionLargeArcFlag } 1 ${ connectionEndPoint[0] } ${ connectionEndPoint[1] }` }\n                    stroke={ connectionGradient ? `url(#connection)` : connectionBgColor }\n                    strokeWidth={ strokeWidth + 1 }\n                    fill=\"none\"\n                    shapeRendering=\"geometricPrecision\"\n                    strokeLinecap=\"round\"\n                    cursor=\"pointer\"\n                    pointerEvents=\"none\"\n                />\n            }\n        </>\n    )\n};\n\nexport default Connection;", "import { IPointer } from '../interfaces';\nimport { CSSProperties, useEffect, useState } from 'react';\nimport { Vector2 } from 'mz-math';\nimport { getPointerPositionByPercent, getValueByPercent } from '../domain/slider-provider';\nimport { DEFAULT_POINTER_STYLE } from '../domain/defaults';\n\nconst Pointer = (props: IPointer) => {\n\n    const {\n        id, pointer, startEndAngle,\n        svgRadii, svgCenter,\n        pointerBgColor, pointerSVG,\n        disabledPointerStyle,\n        min, max, round,\n        data, ariaLabel, pointerGradient,\n    } = props;\n    const { percent, pointerRadii } = pointer;\n    const [ rx, ry ] = pointerRadii;\n    const [ startAngleDegrees, endAngleDegrees ] = startEndAngle;\n\n    const [ center, setCenter ] = useState<Vector2|null>(null);\n    const [ value, setValue ] = useState<number|string>('');\n\n    /**\n     * User provides pointer values that are transformed to percents.\n     * These percents should be transformed to the positions on the SVG arc.\n     */\n    useEffect(() => {\n\n        const { position: center } = getPointerPositionByPercent(\n            percent,\n            startAngleDegrees,\n            endAngleDegrees,\n            svgRadii,\n            svgCenter\n        );\n\n        setCenter(center);\n\n    }, [\n        percent,\n        svgRadii, svgCenter,\n        startAngleDegrees, endAngleDegrees,\n    ]);\n\n    useEffect(() => {\n        setValue(getValueByPercent(\n            percent,\n            min,\n            max,\n            round,\n            data\n        ));\n    }, [\n        min, max, round,\n        data, percent,\n    ]);\n\n    let pointerStyle: CSSProperties = {\n        ...DEFAULT_POINTER_STYLE,\n    };\n\n    if(pointer.disabled) {\n        pointerStyle = { ...pointerStyle, ...disabledPointerStyle };\n    }\n\n    return (\n        center ?\n            <>\n                {\n                    !pointerSVG &&\n                    <ellipse\n                        className={ pointer.disabled ? 'disabled' : undefined }\n                        style={ pointerStyle }\n\n                        aria-disabled={ pointer.disabled ? true : undefined }\n                        aria-valuenow={ value as number }\n                        aria-valuetext={ (value || '').toString() }\n                        aria-label={ ariaLabel }\n\n                        data-type=\"pointer\"\n                        data-index={ pointer.index }\n                        data-id={ id }\n                        data-percent={ pointer.percent }\n\n                        cx={ center[0] }\n                        cy={ center[1]}\n                        rx={ rx }\n                        ry={ ry }\n\n                        cursor=\"pointer\"\n                        tabIndex={ 0 }\n                        role=\"slider\"\n                        fill={ pointerGradient ? `url(#pointer)` : pointerBgColor }\n                    />\n                }\n\n                {\n                    pointerSVG &&\n                    <g\n                        className={ pointer.disabled ? 'disabled' : undefined }\n                        style={ pointerStyle }\n\n                        aria-disabled={ pointer.disabled ? true : undefined }\n                        aria-valuenow={ value as number }\n                        aria-valuetext={ value.toString() }\n                        aria-label={ ariaLabel }\n\n                        data-type=\"pointer\"\n                        data-index={ pointer.index }\n                        data-id={ id }\n                        data-percent={ pointer.percent }\n\n                        cursor=\"pointer\"\n                        transform={ `translate(${ center[0] - rx/2 }, ${ center[1] - ry/2 })` }\n                        tabIndex={ 0 }\n                        role=\"slider\">\n                        <g pointerEvents=\"none\">\n                            { pointerSVG }\n                        </g>\n                    </g>\n                }\n            </> : <></>\n    )\n};\n\nexport default Pointer;", "import { useEffect, useState } from 'react';\nimport { IText } from '../interfaces';\nimport { getValueByPercent } from '../domain/slider-provider';\nimport { DEFAULT_TEXT_COLOR, DEFAULT_TEXT_FONT_SIZE } from '../domain/defaults';\n\nconst Text = (props: IText) => {\n\n    const { \n        svgCenter, round, min, max,\n        pointers, data, textPrefix,\n        textSuffix, textColor,\n        textFontSize, textFontFamily,\n     } = props;\n\n    const [ cx, cy ] = svgCenter;\n    const [ value, setValue ] = useState('');\n\n    useEffect(() => {\n        const values = [];\n\n        for(const pointer of pointers) {\n            const _value = getValueByPercent(\n                pointer.percent,\n                min,\n                max,\n                round,\n                data\n            );\n\n            values.push(`${ textPrefix || '' }${ _value }${ textSuffix || '' }`);\n        }\n\n        setValue(values.join(' '));\n    }, [ \n        data, max, min, \n        pointers, round,\n        textPrefix, textSuffix,\n    ]);\n\n    return (\n        <text \n            x={ cx } \n            y={ cy }\n            fill={ textColor || DEFAULT_TEXT_COLOR }\n            fontSize={ textFontSize || DEFAULT_TEXT_FONT_SIZE }\n            fontFamily={ textFontFamily }\n            style={{ userSelect: 'none' }}\n            textAnchor=\"middle\">{ value }\n        </text>\n    )\n};\n\nexport default Text;", "import { ITick, ITicks, TData } from '../interfaces';\nimport { Fragment, MutableRefObject, useEffect, useState } from 'react';\nimport { v2MulScalar, v2Normalize } from 'mz-math';\nimport {\n    TICKS_WIDTH_DEFAULT,\n    TICKS_HEIGHT_DEFAULT,\n    DEFAULT_TEXT_COLOR,\n    DEFAULT_TEXT_FONT_SIZE\n} from '../domain/defaults';\nimport { getValueByPercent } from '../domain/slider-provider';\nimport { getNumber } from '../domain/common';\n\nconst getTicks = (\n    ticsCount: number,\n    totalLength: number,\n    sliderRef: MutableRefObject<SVGPathElement>,\n    min: number,\n    max: number,\n    round: number,\n    data?: TData,\n    ticksGroupSize?: number,\n    showTickValues?: boolean,\n    longerTickValuesOnly?: boolean\n) : ITick[] => {\n    const ticks: ITick[] = [];\n\n    const oneTickSize = ticsCount === 0 ? 0 : totalLength / ticsCount;\n\n    for(let i=0; i<ticsCount; i++) {\n        const distance = i * oneTickSize;\n        const point = sliderRef?.current?.getPointAtLength(distance);\n\n        const x = point ? point.x : 0;\n        const y = point ? point.y : 0;\n        const isLonger = ticksGroupSize !== undefined && (i % ticksGroupSize === 0);\n        let tickValue: string|undefined = undefined;\n\n        if(showTickValues && (!longerTickValuesOnly || longerTickValuesOnly && (isLonger || ticksGroupSize === undefined))) {\n            tickValue = (getValueByPercent(\n                distance * 100 / totalLength,\n                min,\n                max,\n                round,\n                data,\n            ) ?? '').toString();\n        }\n\n        ticks.push({\n            distance,\n            x,\n            y,\n            isLonger,\n            tickValue,\n        });\n    }\n\n    return ticks;\n};\n\nexport const Ticks = (props: ITicks) => {\n\n    const {\n        ticksColor, ticksWidth,\n        ticksHeight, longerTicksHeight,\n        ticsCount, ticksGroupSize, totalLength,\n        sliderRef, svgCenter, ticksDistanceToPanel,\n        min, max, round, data,\n        showTickValues, longerTickValuesOnly,\n        tickValuesColor, tickValuesFontSize,\n        tickValuesFontFamily, tickValuesDistance,\n    } = props;\n    const [ ticks, setTicks ] = useState<ITick[]>([]);\n\n    useEffect(() => {\n        setTicks(getTicks(\n            ticsCount,\n            totalLength,\n            sliderRef,\n            min,\n            max,\n            round,\n            data,\n            ticksGroupSize,\n            showTickValues,\n            longerTickValuesOnly\n        ));\n    }, [\n        ticsCount, totalLength, sliderRef, ticksGroupSize,\n        data, longerTickValuesOnly, min, max, round, showTickValues,\n    ]);\n\n    const [ cx, cy ] = svgCenter;\n\n    return (\n        <g>\n            {\n                ticks.map((tick, i) => {\n                    let { x, y } = tick;\n\n                    let desiredDistance = ticksHeight || TICKS_HEIGHT_DEFAULT;\n\n                    if(tick.isLonger) {\n                        desiredDistance = longerTicksHeight;\n                    }\n\n                    const normalizedDirectionVector = v2Normalize([cx - x, cy - y]);\n                    const tickEndVector = v2MulScalar(normalizedDirectionVector, desiredDistance);\n\n                    const tickStartVector = v2MulScalar(normalizedDirectionVector, ticksDistanceToPanel);\n                    x += tickStartVector[0];\n                    y += tickStartVector[1];\n\n                    const x3 = x + tickEndVector[0];\n                    const y3 = y + tickEndVector[1];\n\n                    let textX = 0;\n                    let textY = 0;\n                    const showText = tick.tickValue !== undefined;\n\n                    if(showText) {\n                        const _tickValuesDistance = getNumber(desiredDistance + tickValuesDistance, desiredDistance * 1.5);\n                        const tickTextVector = v2MulScalar(normalizedDirectionVector, _tickValuesDistance);\n                        textX = x + tickTextVector[0];\n                        textY = y + tickTextVector[1];\n                    }\n\n                    return (\n                        <Fragment key={ i }>\n                            <line\n                                x1={ x }\n                                y1={ y }\n                                x2={ x3 }\n                                y2={ y3 }\n                                strokeWidth={ ticksWidth || TICKS_WIDTH_DEFAULT }\n                                stroke={ ticksColor }\n                            />\n\n                            {\n                                showText &&\n                                <text\n                                    x={ textX }\n                                    y={ textY }\n                                    textAnchor=\"middle\"\n                                    dominantBaseline=\"middle\"\n                                    fill={ tickValuesColor || DEFAULT_TEXT_COLOR }\n                                    fontSize={ tickValuesFontSize || DEFAULT_TEXT_FONT_SIZE }\n                                    fontFamily={ tickValuesFontFamily }\n                                    style={{ userSelect: 'none' }}\n                                >{ tick.tickValue }</text>\n                            }\n                        </Fragment>\n                    );\n                })\n            }\n        </g>\n    )\n};\n\nexport default Ticks;"],
  "mappings": "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",
  "names": ["require_react_production_min", "__commonJSMin", "exports", "l", "n", "p", "q", "r", "t", "u", "v", "w", "x", "y", "z", "A", "a", "B", "C", "D", "E", "b", "e", "F", "G", "H", "I", "J", "K", "L", "M", "d", "c", "k", "h", "g", "f", "m", "N", "O", "escape", "P", "Q", "R", "S", "T", "U", "V", "W", "require_react", "__commonJSMin", "exports", "module", "require_react_jsx_runtime_production_min", "__commonJSMin", "exports", "f", "k", "l", "m", "n", "p", "q", "c", "a", "g", "b", "d", "e", "h", "require_jsx_runtime", "__commonJSMin", "exports", "module", "import_react", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "isNumber", "value", "polarToCartesian", "center", "radii", "angleInRad", "decimalPlaces", "cx", "cy", "rx", "ry", "setDecimalPlaces", "radiansToDegrees", "radians", "decimalPlaces", "res", "setDecimalPlaces", "degreesToRadians", "degrees", "getAnglesSub", "angleDegrees1", "angleDegrees2", "decimalPlaces", "angleDistance", "mod", "setDecimalPlaces", "vSub", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2Sub", "vMulScalar", "v", "scalar", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2MulScalar", "v2", "vLength", "vector", "decimalPlaces", "sum", "i", "setDecimalPlaces", "vNormalize", "v", "decimalPlaces", "length", "vLength", "unitVector", "i", "setDecimalPlaces", "v2Normalize", "v2", "ellipseMovement", "center", "angle", "radius1", "radius2", "newId", "getNumber", "value", "defaultValue", "H", "getString", "getBoolean", "DEFAULT_BG_COLOR", "DEFAULT_CONNECTION_BG_COLOR", "DEFAULT_POINTER_BG_COLOR", "DISABLED_POINTER_STYLE", "DEFAULT_SVG_STYLE", "DEFAULT_POINTER_STYLE", "ROUND_DEFAULT", "TICKS_WIDTH_DEFAULT", "TICKS_HEIGHT_DEFAULT", "DEFAULT_TEXT_COLOR", "DEFAULT_TEXT_FONT_SIZE", "isAngleInArc", "startAngleDegrees", "endAngleDegrees", "currentDegrees", "normalizeAngles", "_startAngleDegrees", "getNumber", "_endAngleDegrees", "I", "getMaxPointer", "pointers", "maxX", "maxY", "pointer", "rx", "ry", "getMinMax", "min", "max", "data", "minIndex", "item", "maxIndex", "_min", "_max", "getNumber", "getValue", "value", "index", "_value", "getValueByPercent", "percent", "min", "max", "round", "data", "value", "O", "s", "roundToStep", "num", "step", "getStepPercent", "diff", "getInitialPointers", "userSettingsPointers", "pointerBgColor", "pointerSVG", "pointers", "_userSettingsPointers", "i", "userSettingsPointer", "getValue", "pointer", "getNumber", "Lo", "DEFAULT_POINTER_BG_COLOR", "pointer1", "pointer2", "getPointerPositionByPercent", "startAngleDegrees", "endAngleDegrees", "svgRadii", "center", "angleDiff", "percentAngle", "angleDegrees", "I", "angleRad", "pr", "Jt", "getMinMaxPointer", "minPercent", "minPointer", "maxPercent", "maxPointer", "getPointerPercentByMouse", "$svg", "absoluteMouse", "clientX", "clientY", "left", "top", "relativeMouse", "vector", "R", "rx", "ry", "degrees", "fr", "isAngleInArc", "angleSub1", "j", "angleSub2", "updatedPercent", "stepPercent", "result", "getPointerIndexById", "id", "isPanelClicked", "$target", "isConnectionClicked", "isPointerClicked", "getActivePointerId", "currentPercent", "selectedPointerId", "isClickOrDrag", "currentValueAngle", "minAngle", "minDistancePointerId", "pointerAngle", "angleSub", "getNextPrevPointer", "pointers", "currentPointerId", "currentPointer", "pointer", "nextIndex", "I", "nextPointer", "prevIndex", "prevPointer", "updateSinglePointerValue", "updatedPercent", "copy", "updateMultiplePointersValue", "selectedPointerId", "pointerIndex", "p", "__spreadValues", "handleOverlap", "activePointerId", "min", "max", "diff", "range", "isClockwise", "getSVGSize", "svgRadii", "maxPointerRadii", "strokeWidth", "rxSvg", "rySvg", "rxPointer", "ryPointer", "diffX", "diffY", "svgWidth", "svgHeight", "getSVGCenter", "s", "getEllipseSegment", "startAngleDegrees", "endAngleDegrees", "pointerRadii", "_endAngleDegrees", "largeArcFlag", "center", "sliderStartPoint", "cr", "pr", "sliderEndPoint", "import_react", "import_jsx_runtime", "Panel", "props", "sliderRef", "ellipse", "strokeWidth", "svgRadii", "bgColor", "start", "end", "largeArcFlag", "Panel_default", "import_react", "import_jsx_runtime", "Connection", "props", "pointers", "ellipse", "strokeWidth", "svgCenter", "svgRadii", "connectionBgColor", "connectionGradient", "startEndAngle", "start", "startAngleDegrees", "endAngleDegrees", "connectionStartPoint", "setConnectionStartPoint", "connectionEndPoint", "setConnectionEndPoint", "connectionLargeArcFlag", "setConnectionLargeArcFlag", "pointer", "center", "angleDegrees", "getPointerPositionByPercent", "minMax", "getMinMaxPointer", "minPointer", "maxPointer", "centerStart", "angleDegreesStart", "centerEnd", "angleDegreesEnd", "Connection_default", "import_react", "import_jsx_runtime", "Pointer", "props", "id", "pointer", "startEndAngle", "svgRadii", "svgCenter", "pointerBgColor", "pointerSVG", "disabledPointerStyle", "min", "max", "round", "data", "ariaLabel", "pointerGradient", "percent", "pointerRadii", "rx", "ry", "startAngleDegrees", "endAngleDegrees", "center", "setCenter", "value", "setValue", "getPointerPositionByPercent", "getValueByPercent", "pointerStyle", "__spreadValues", "DEFAULT_POINTER_STYLE", "Pointer_default", "import_react", "import_jsx_runtime", "Text", "props", "svgCenter", "round", "min", "max", "pointers", "data", "textPrefix", "textSuffix", "textColor", "textFontSize", "textFontFamily", "cx", "cy", "value", "setValue", "values", "pointer", "_value", "getValueByPercent", "DEFAULT_TEXT_COLOR", "DEFAULT_TEXT_FONT_SIZE", "Text_default", "import_react", "import_jsx_runtime", "getTicks", "ticsCount", "totalLength", "sliderRef", "min", "max", "round", "data", "ticksGroupSize", "showTickValues", "longerTickValuesOnly", "_a", "_b", "ticks", "oneTickSize", "i", "distance", "point", "x", "y", "isLonger", "tickValue", "getValueByPercent", "Ticks", "props", "ticksColor", "ticksWidth", "ticksHeight", "longerTicksHeight", "svgCenter", "ticksDistanceToPanel", "tickValuesColor", "tickValuesFontSize", "tickValuesFontFamily", "tickValuesDistance", "setTicks", "cx", "cy", "tick", "desiredDistance", "TICKS_HEIGHT_DEFAULT", "normalizedDirectionVector", "D", "tickEndVector", "vr", "tickStartVector", "x3", "y3", "textX", "textY", "showText", "_tickValuesDistance", "getNumber", "tickTextVector", "TICKS_WIDTH_DEFAULT", "DEFAULT_TEXT_COLOR", "DEFAULT_TEXT_FONT_SIZE", "Ticks_default", "import_jsx_runtime", "RoundSlider", "props", "_a", "svgRef", "sliderRef", "isClickOrDrag", "selectedPointerId", "setSelectedPointerId", "svgRadii", "setSvgRadii", "panelStrokeWidth", "setPanelStrokeWidth", "minMax", "setMinMax", "pointers", "setPointers", "maxPointer", "setMaxPointer", "svgSize", "setSvgSize", "svgCenter", "setSvgCenter", "startEndAngle", "setStartEndAngle", "ellipse", "setEllipse", "panelBgColor", "setPanelBgColor", "DEFAULT_BG_COLOR", "connectionBgColor", "setConnectionBgColor", "DEFAULT_CONNECTION_BG_COLOR", "pointerBgColor", "setPointerBgColor", "DEFAULT_POINTER_BG_COLOR", "pointersOverlap", "setPointersOverlap", "disabled", "setDisabled", "disabledPointerStyle", "setDisabledPointerStyle", "keyboardDisabled", "setKeyboardDisabled", "mousewheelDisabled", "setMousewheelDisabled", "round", "setRound", "ROUND_DEFAULT", "stepPercent", "setStepPercent", "min", "max", "svgWidth", "svgHeight", "startAngleDegrees", "endAngleDegrees", "hideText", "setHideText", "textPrefix", "setTextPrefix", "textSuffix", "setTextSuffix", "disableTicks", "setDisableTicks", "ticksWidth", "setTicksWidth", "TICKS_WIDTH_DEFAULT", "ticksHeight", "setTicksHeight", "TICKS_HEIGHT_DEFAULT", "longerTicksHeight", "setLongerTicksHeight", "ticsCount", "setTicsCount", "ticksDistanceToPanel", "setTicksDistanceToPanel", "getStepPercent", "getBoolean", "getNumber", "_ticksHeight", "ticksCount", "getString", "DISABLED_POINTER_STYLE", "getMinMax", "getInitialPointers", "getMaxPointer", "getSVGSize", "getSVGCenter", "normalizeAngles", "getEllipseSegment", "sendChangeEvent", "_pointers", "_values", "pointer", "getValueByPercent", "onValueChange", "evt", "mouseX", "mouseY", "updatedPercent", "getPointerPercentByMouse", "currentPointers", "updatedPointers", "updateSinglePointerValue", "_selectedPointerId", "currentSelectedPointerId", "getActivePointerId", "handleOverlap", "updateMultiplePointersValue", "onMouseDown", "$target", "onMouseUp", "_evt", "goPrevNext", "isNext", "pointerIndex", "getPointerIndexById", "__spreadValues", "percent", "H", "_stepPercent", "I", "copy", "arrowLeftUp", "arrowRightDown", "scrollTop", "DEFAULT_SVG_STYLE", "Panel_default", "Ticks_default", "Connection_default", "Pointer_default", "Text_default"]
}
